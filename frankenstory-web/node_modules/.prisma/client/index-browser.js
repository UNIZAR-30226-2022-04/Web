
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.PlayerScalarFieldEnum = makeEnum({
  username: 'username',
  password_hash: 'password_hash',
  email: 'email',
  image_ID: 'image_ID',
  mooncoins: 'mooncoins',
  stars: 'stars'
});

exports.Prisma.PetitionScalarFieldEnum = makeEnum({
  username: 'username',
  petition_name: 'petition_name'
});

exports.Prisma.FriendshipScalarFieldEnum = makeEnum({
  username: 'username',
  friendname: 'friendname'
});

exports.Prisma.StoryScalarFieldEnum = makeEnum({
  story_id: 'story_id',
  date: 'date'
});

exports.Prisma.ParticipantScalarFieldEnum = makeEnum({
  username: 'username',
  story_id: 'story_id',
  voted: 'voted',
  creator: 'creator'
});

exports.Prisma.Tale_modeScalarFieldEnum = makeEnum({
  story_id: 'story_id',
  max_turns: 'max_turns',
  max_paragraph_chars: 'max_paragraph_chars',
  privacy: 'privacy',
  finished: 'finished',
  scored: 'scored',
  title: 'title',
  turn: 'turn'
});

exports.Prisma.Quick_matchScalarFieldEnum = makeEnum({
  story_id: 'story_id',
  mode: 'mode'
});

exports.Prisma.ParagraphScalarFieldEnum = makeEnum({
  text: 'text',
  Score: 'Score',
  turn_number: 'turn_number',
  username: 'username',
  story_id: 'story_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  Player: 'Player',
  Petition: 'Petition',
  Friendship: 'Friendship',
  Story: 'Story',
  Participant: 'Participant',
  Tale_mode: 'Tale_mode',
  Quick_match: 'Quick_match',
  Paragraph: 'Paragraph'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
