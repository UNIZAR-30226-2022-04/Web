
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Player
 * 
 */
export type Player = {
  username: string
  password_hash: string
  email: string
  image_ID: number
  mooncoins: number
  stars: number
}

/**
 * Model Petition
 * 
 */
export type Petition = {
  username: string
  petition_name: string
}

/**
 * Model Friendship
 * 
 */
export type Friendship = {
  username: string
  friendname: string
}

/**
 * Model Story
 * 
 */
export type Story = {
  story_id: number
  date: Date
}

/**
 * Model Participant
 * 
 */
export type Participant = {
  username: string
  story_id: number
  voted: string
  creator: boolean
}

/**
 * Model Tale_mode
 * 
 */
export type Tale_mode = {
  story_id: number
  max_turns: number
  max_paragraph_chars: number
  privacy: boolean
  finished: boolean
  scored: boolean
  title: string
  turn: number
}

/**
 * Model Quick_match
 * 
 */
export type Quick_match = {
  story_id: number
  mode: number
}

/**
 * Model Paragraph
 * 
 */
export type Paragraph = {
  text: string
  Score: number
  turn_number: number
  username: string
  story_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Players
 * const players = await prisma.player.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Players
   * const players = await prisma.player.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<GlobalReject>;

  /**
   * `prisma.petition`: Exposes CRUD operations for the **Petition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Petitions
    * const petitions = await prisma.petition.findMany()
    * ```
    */
  get petition(): Prisma.PetitionDelegate<GlobalReject>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<GlobalReject>;

  /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<GlobalReject>;

  /**
   * `prisma.participant`: Exposes CRUD operations for the **Participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participants
    * const participants = await prisma.participant.findMany()
    * ```
    */
  get participant(): Prisma.ParticipantDelegate<GlobalReject>;

  /**
   * `prisma.tale_mode`: Exposes CRUD operations for the **Tale_mode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tale_modes
    * const tale_modes = await prisma.tale_mode.findMany()
    * ```
    */
  get tale_mode(): Prisma.Tale_modeDelegate<GlobalReject>;

  /**
   * `prisma.quick_match`: Exposes CRUD operations for the **Quick_match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quick_matches
    * const quick_matches = await prisma.quick_match.findMany()
    * ```
    */
  get quick_match(): Prisma.Quick_matchDelegate<GlobalReject>;

  /**
   * `prisma.paragraph`: Exposes CRUD operations for the **Paragraph** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paragraphs
    * const paragraphs = await prisma.paragraph.findMany()
    * ```
    */
  get paragraph(): Prisma.ParagraphDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Player: 'Player',
    Petition: 'Petition',
    Friendship: 'Friendship',
    Story: 'Story',
    Participant: 'Participant',
    Tale_mode: 'Tale_mode',
    Quick_match: 'Quick_match',
    Paragraph: 'Paragraph'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlayerCountOutputType
   */


  export type PlayerCountOutputType = {
    friend: number
    himself: number
    contributor: number
    participant: number
    receiver: number
    questioner: number
  }

  export type PlayerCountOutputTypeSelect = {
    friend?: boolean
    himself?: boolean
    contributor?: boolean
    participant?: boolean
    receiver?: boolean
    questioner?: boolean
  }

  export type PlayerCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PlayerCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PlayerCountOutputType
    : S extends undefined
    ? never
    : S extends PlayerCountOutputTypeArgs
    ?'include' extends U
    ? PlayerCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PlayerCountOutputType ? PlayerCountOutputType[P] : never
  } 
    : PlayerCountOutputType
  : PlayerCountOutputType




  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     * 
    **/
    select?: PlayerCountOutputTypeSelect | null
  }



  /**
   * Count Type StoryCountOutputType
   */


  export type StoryCountOutputType = {
    contributed: number
    story: number
  }

  export type StoryCountOutputTypeSelect = {
    contributed?: boolean
    story?: boolean
  }

  export type StoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StoryCountOutputType
    : S extends undefined
    ? never
    : S extends StoryCountOutputTypeArgs
    ?'include' extends U
    ? StoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StoryCountOutputType ? StoryCountOutputType[P] : never
  } 
    : StoryCountOutputType
  : StoryCountOutputType




  // Custom InputTypes

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StoryCountOutputType
     * 
    **/
    select?: StoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Player
   */


  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    image_ID: number | null
    mooncoins: number | null
    stars: number | null
  }

  export type PlayerSumAggregateOutputType = {
    image_ID: number | null
    mooncoins: number | null
    stars: number | null
  }

  export type PlayerMinAggregateOutputType = {
    username: string | null
    password_hash: string | null
    email: string | null
    image_ID: number | null
    mooncoins: number | null
    stars: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    username: string | null
    password_hash: string | null
    email: string | null
    image_ID: number | null
    mooncoins: number | null
    stars: number | null
  }

  export type PlayerCountAggregateOutputType = {
    username: number
    password_hash: number
    email: number
    image_ID: number
    mooncoins: number
    stars: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    image_ID?: true
    mooncoins?: true
    stars?: true
  }

  export type PlayerSumAggregateInputType = {
    image_ID?: true
    mooncoins?: true
    stars?: true
  }

  export type PlayerMinAggregateInputType = {
    username?: true
    password_hash?: true
    email?: true
    image_ID?: true
    mooncoins?: true
    stars?: true
  }

  export type PlayerMaxAggregateInputType = {
    username?: true
    password_hash?: true
    email?: true
    image_ID?: true
    mooncoins?: true
    stars?: true
  }

  export type PlayerCountAggregateInputType = {
    username?: true
    password_hash?: true
    email?: true
    image_ID?: true
    mooncoins?: true
    stars?: true
    _all?: true
  }

  export type PlayerAggregateArgs = {
    /**
     * Filter which Player to aggregate.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs = {
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithAggregationInput>
    by: Array<PlayerScalarFieldEnum>
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }


  export type PlayerGroupByOutputType = {
    username: string
    password_hash: string
    email: string
    image_ID: number
    mooncoins: number
    stars: number
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect = {
    username?: boolean
    password_hash?: boolean
    email?: boolean
    image_ID?: boolean
    mooncoins?: boolean
    stars?: boolean
    friend?: boolean | FriendshipFindManyArgs
    himself?: boolean | FriendshipFindManyArgs
    contributor?: boolean | ParagraphFindManyArgs
    participant?: boolean | ParticipantFindManyArgs
    receiver?: boolean | PetitionFindManyArgs
    questioner?: boolean | PetitionFindManyArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  }

  export type PlayerInclude = {
    friend?: boolean | FriendshipFindManyArgs
    himself?: boolean | FriendshipFindManyArgs
    contributor?: boolean | ParagraphFindManyArgs
    participant?: boolean | ParticipantFindManyArgs
    receiver?: boolean | PetitionFindManyArgs
    questioner?: boolean | PetitionFindManyArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  }

  export type PlayerGetPayload<
    S extends boolean | null | undefined | PlayerArgs,
    U = keyof S
      > = S extends true
        ? Player
    : S extends undefined
    ? never
    : S extends PlayerArgs | PlayerFindManyArgs
    ?'include' extends U
    ? Player  & {
    [P in TrueKeys<S['include']>]:
        P extends 'friend' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'himself' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'contributor' ? Array < ParagraphGetPayload<S['include'][P]>>  :
        P extends 'participant' ? Array < ParticipantGetPayload<S['include'][P]>>  :
        P extends 'receiver' ? Array < PetitionGetPayload<S['include'][P]>>  :
        P extends 'questioner' ? Array < PetitionGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'friend' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'himself' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'contributor' ? Array < ParagraphGetPayload<S['select'][P]>>  :
        P extends 'participant' ? Array < ParticipantGetPayload<S['select'][P]>>  :
        P extends 'receiver' ? Array < PetitionGetPayload<S['select'][P]>>  :
        P extends 'questioner' ? Array < PetitionGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Player ? Player[P] : never
  } 
    : Player
  : Player


  type PlayerCountArgs = Merge<
    Omit<PlayerFindManyArgs, 'select' | 'include'> & {
      select?: PlayerCountAggregateInputType | true
    }
  >

  export interface PlayerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlayerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Player'> extends True ? CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>> : CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlayerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Player'> extends True ? CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>> : CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const playerWithUsernameOnly = await prisma.player.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs>(
      args?: SelectSubset<T, PlayerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Player>>, PrismaPromise<Array<PlayerGetPayload<T>>>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs>(
      args: SelectSubset<T, PlayerCreateArgs>
    ): CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>>

    /**
     * Create many Players.
     *     @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     *     @example
     *     // Create many Players
     *     const player = await prisma.player.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs>(
      args?: SelectSubset<T, PlayerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs>(
      args: SelectSubset<T, PlayerDeleteArgs>
    ): CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs>(
      args: SelectSubset<T, PlayerUpdateArgs>
    ): CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs>(
      args?: SelectSubset<T, PlayerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs>(
      args: SelectSubset<T, PlayerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs>(
      args: SelectSubset<T, PlayerUpsertArgs>
    ): CheckSelect<T, Prisma__PlayerClient<Player>, Prisma__PlayerClient<PlayerGetPayload<T>>>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlayerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    friend<T extends FriendshipFindManyArgs = {}>(args?: Subset<T, FriendshipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>;

    himself<T extends FriendshipFindManyArgs = {}>(args?: Subset<T, FriendshipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>;

    contributor<T extends ParagraphFindManyArgs = {}>(args?: Subset<T, ParagraphFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Paragraph>>, PrismaPromise<Array<ParagraphGetPayload<T>>>>;

    participant<T extends ParticipantFindManyArgs = {}>(args?: Subset<T, ParticipantFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>;

    receiver<T extends PetitionFindManyArgs = {}>(args?: Subset<T, PetitionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Petition>>, PrismaPromise<Array<PetitionGetPayload<T>>>>;

    questioner<T extends PetitionFindManyArgs = {}>(args?: Subset<T, PetitionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Petition>>, PrismaPromise<Array<PetitionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Throw an Error if a Player can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Throw an Error if a Player can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     * 
    **/
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player findMany
   */
  export type PlayerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Players to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to create a Player.
     * 
    **/
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs = {
    /**
     * The data used to create many Players.
     * 
    **/
    data: Enumerable<PlayerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to update a Player.
     * 
    **/
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs = {
    /**
     * The data used to update Players.
     * 
    **/
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The filter to search for the Player to update in case it exists.
     * 
    **/
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     * 
    **/
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter which Player to delete.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs = {
    /**
     * Filter which Players to delete
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player without action
   */
  export type PlayerArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
  }



  /**
   * Model Petition
   */


  export type AggregatePetition = {
    _count: PetitionCountAggregateOutputType | null
    _min: PetitionMinAggregateOutputType | null
    _max: PetitionMaxAggregateOutputType | null
  }

  export type PetitionMinAggregateOutputType = {
    username: string | null
    petition_name: string | null
  }

  export type PetitionMaxAggregateOutputType = {
    username: string | null
    petition_name: string | null
  }

  export type PetitionCountAggregateOutputType = {
    username: number
    petition_name: number
    _all: number
  }


  export type PetitionMinAggregateInputType = {
    username?: true
    petition_name?: true
  }

  export type PetitionMaxAggregateInputType = {
    username?: true
    petition_name?: true
  }

  export type PetitionCountAggregateInputType = {
    username?: true
    petition_name?: true
    _all?: true
  }

  export type PetitionAggregateArgs = {
    /**
     * Filter which Petition to aggregate.
     * 
    **/
    where?: PetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petitions to fetch.
     * 
    **/
    orderBy?: Enumerable<PetitionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petitions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petitions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Petitions
    **/
    _count?: true | PetitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetitionMaxAggregateInputType
  }

  export type GetPetitionAggregateType<T extends PetitionAggregateArgs> = {
        [P in keyof T & keyof AggregatePetition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetition[P]>
      : GetScalarType<T[P], AggregatePetition[P]>
  }




  export type PetitionGroupByArgs = {
    where?: PetitionWhereInput
    orderBy?: Enumerable<PetitionOrderByWithAggregationInput>
    by: Array<PetitionScalarFieldEnum>
    having?: PetitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetitionCountAggregateInputType | true
    _min?: PetitionMinAggregateInputType
    _max?: PetitionMaxAggregateInputType
  }


  export type PetitionGroupByOutputType = {
    username: string
    petition_name: string
    _count: PetitionCountAggregateOutputType | null
    _min: PetitionMinAggregateOutputType | null
    _max: PetitionMaxAggregateOutputType | null
  }

  type GetPetitionGroupByPayload<T extends PetitionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PetitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetitionGroupByOutputType[P]>
            : GetScalarType<T[P], PetitionGroupByOutputType[P]>
        }
      >
    >


  export type PetitionSelect = {
    username?: boolean
    petition_name?: boolean
    receiver?: boolean | PlayerArgs
    questioner?: boolean | PlayerArgs
  }

  export type PetitionInclude = {
    receiver?: boolean | PlayerArgs
    questioner?: boolean | PlayerArgs
  }

  export type PetitionGetPayload<
    S extends boolean | null | undefined | PetitionArgs,
    U = keyof S
      > = S extends true
        ? Petition
    : S extends undefined
    ? never
    : S extends PetitionArgs | PetitionFindManyArgs
    ?'include' extends U
    ? Petition  & {
    [P in TrueKeys<S['include']>]:
        P extends 'receiver' ? PlayerGetPayload<S['include'][P]> :
        P extends 'questioner' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'receiver' ? PlayerGetPayload<S['select'][P]> :
        P extends 'questioner' ? PlayerGetPayload<S['select'][P]> :  P extends keyof Petition ? Petition[P] : never
  } 
    : Petition
  : Petition


  type PetitionCountArgs = Merge<
    Omit<PetitionFindManyArgs, 'select' | 'include'> & {
      select?: PetitionCountAggregateInputType | true
    }
  >

  export interface PetitionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Petition that matches the filter.
     * @param {PetitionFindUniqueArgs} args - Arguments to find a Petition
     * @example
     * // Get one Petition
     * const petition = await prisma.petition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetitionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PetitionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Petition'> extends True ? CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>> : CheckSelect<T, Prisma__PetitionClient<Petition | null >, Prisma__PetitionClient<PetitionGetPayload<T> | null >>

    /**
     * Find the first Petition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionFindFirstArgs} args - Arguments to find a Petition
     * @example
     * // Get one Petition
     * const petition = await prisma.petition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetitionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PetitionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Petition'> extends True ? CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>> : CheckSelect<T, Prisma__PetitionClient<Petition | null >, Prisma__PetitionClient<PetitionGetPayload<T> | null >>

    /**
     * Find zero or more Petitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Petitions
     * const petitions = await prisma.petition.findMany()
     * 
     * // Get first 10 Petitions
     * const petitions = await prisma.petition.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const petitionWithUsernameOnly = await prisma.petition.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends PetitionFindManyArgs>(
      args?: SelectSubset<T, PetitionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Petition>>, PrismaPromise<Array<PetitionGetPayload<T>>>>

    /**
     * Create a Petition.
     * @param {PetitionCreateArgs} args - Arguments to create a Petition.
     * @example
     * // Create one Petition
     * const Petition = await prisma.petition.create({
     *   data: {
     *     // ... data to create a Petition
     *   }
     * })
     * 
    **/
    create<T extends PetitionCreateArgs>(
      args: SelectSubset<T, PetitionCreateArgs>
    ): CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>>

    /**
     * Create many Petitions.
     *     @param {PetitionCreateManyArgs} args - Arguments to create many Petitions.
     *     @example
     *     // Create many Petitions
     *     const petition = await prisma.petition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetitionCreateManyArgs>(
      args?: SelectSubset<T, PetitionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Petition.
     * @param {PetitionDeleteArgs} args - Arguments to delete one Petition.
     * @example
     * // Delete one Petition
     * const Petition = await prisma.petition.delete({
     *   where: {
     *     // ... filter to delete one Petition
     *   }
     * })
     * 
    **/
    delete<T extends PetitionDeleteArgs>(
      args: SelectSubset<T, PetitionDeleteArgs>
    ): CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>>

    /**
     * Update one Petition.
     * @param {PetitionUpdateArgs} args - Arguments to update one Petition.
     * @example
     * // Update one Petition
     * const petition = await prisma.petition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetitionUpdateArgs>(
      args: SelectSubset<T, PetitionUpdateArgs>
    ): CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>>

    /**
     * Delete zero or more Petitions.
     * @param {PetitionDeleteManyArgs} args - Arguments to filter Petitions to delete.
     * @example
     * // Delete a few Petitions
     * const { count } = await prisma.petition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetitionDeleteManyArgs>(
      args?: SelectSubset<T, PetitionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Petitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Petitions
     * const petition = await prisma.petition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetitionUpdateManyArgs>(
      args: SelectSubset<T, PetitionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Petition.
     * @param {PetitionUpsertArgs} args - Arguments to update or create a Petition.
     * @example
     * // Update or create a Petition
     * const petition = await prisma.petition.upsert({
     *   create: {
     *     // ... data to create a Petition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Petition we want to update
     *   }
     * })
    **/
    upsert<T extends PetitionUpsertArgs>(
      args: SelectSubset<T, PetitionUpsertArgs>
    ): CheckSelect<T, Prisma__PetitionClient<Petition>, Prisma__PetitionClient<PetitionGetPayload<T>>>

    /**
     * Count the number of Petitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionCountArgs} args - Arguments to filter Petitions to count.
     * @example
     * // Count the number of Petitions
     * const count = await prisma.petition.count({
     *   where: {
     *     // ... the filter for the Petitions we want to count
     *   }
     * })
    **/
    count<T extends PetitionCountArgs>(
      args?: Subset<T, PetitionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Petition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetitionAggregateArgs>(args: Subset<T, PetitionAggregateArgs>): PrismaPromise<GetPetitionAggregateType<T>>

    /**
     * Group by Petition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetitionGroupByArgs['orderBy'] }
        : { orderBy?: PetitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetitionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Petition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PetitionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    receiver<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    questioner<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Petition findUnique
   */
  export type PetitionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * Throw an Error if a Petition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Petition to fetch.
     * 
    **/
    where: PetitionWhereUniqueInput
  }


  /**
   * Petition findFirst
   */
  export type PetitionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * Throw an Error if a Petition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Petition to fetch.
     * 
    **/
    where?: PetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petitions to fetch.
     * 
    **/
    orderBy?: Enumerable<PetitionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Petitions.
     * 
    **/
    cursor?: PetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petitions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petitions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Petitions.
     * 
    **/
    distinct?: Enumerable<PetitionScalarFieldEnum>
  }


  /**
   * Petition findMany
   */
  export type PetitionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * Filter, which Petitions to fetch.
     * 
    **/
    where?: PetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Petitions to fetch.
     * 
    **/
    orderBy?: Enumerable<PetitionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Petitions.
     * 
    **/
    cursor?: PetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Petitions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Petitions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PetitionScalarFieldEnum>
  }


  /**
   * Petition create
   */
  export type PetitionCreateArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * The data needed to create a Petition.
     * 
    **/
    data: XOR<PetitionCreateInput, PetitionUncheckedCreateInput>
  }


  /**
   * Petition createMany
   */
  export type PetitionCreateManyArgs = {
    /**
     * The data used to create many Petitions.
     * 
    **/
    data: Enumerable<PetitionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Petition update
   */
  export type PetitionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * The data needed to update a Petition.
     * 
    **/
    data: XOR<PetitionUpdateInput, PetitionUncheckedUpdateInput>
    /**
     * Choose, which Petition to update.
     * 
    **/
    where: PetitionWhereUniqueInput
  }


  /**
   * Petition updateMany
   */
  export type PetitionUpdateManyArgs = {
    /**
     * The data used to update Petitions.
     * 
    **/
    data: XOR<PetitionUpdateManyMutationInput, PetitionUncheckedUpdateManyInput>
    /**
     * Filter which Petitions to update
     * 
    **/
    where?: PetitionWhereInput
  }


  /**
   * Petition upsert
   */
  export type PetitionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * The filter to search for the Petition to update in case it exists.
     * 
    **/
    where: PetitionWhereUniqueInput
    /**
     * In case the Petition found by the `where` argument doesn't exist, create a new Petition with this data.
     * 
    **/
    create: XOR<PetitionCreateInput, PetitionUncheckedCreateInput>
    /**
     * In case the Petition was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PetitionUpdateInput, PetitionUncheckedUpdateInput>
  }


  /**
   * Petition delete
   */
  export type PetitionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
    /**
     * Filter which Petition to delete.
     * 
    **/
    where: PetitionWhereUniqueInput
  }


  /**
   * Petition deleteMany
   */
  export type PetitionDeleteManyArgs = {
    /**
     * Filter which Petitions to delete
     * 
    **/
    where?: PetitionWhereInput
  }


  /**
   * Petition without action
   */
  export type PetitionArgs = {
    /**
     * Select specific fields to fetch from the Petition
     * 
    **/
    select?: PetitionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetitionInclude | null
  }



  /**
   * Model Friendship
   */


  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipMinAggregateOutputType = {
    username: string | null
    friendname: string | null
  }

  export type FriendshipMaxAggregateOutputType = {
    username: string | null
    friendname: string | null
  }

  export type FriendshipCountAggregateOutputType = {
    username: number
    friendname: number
    _all: number
  }


  export type FriendshipMinAggregateInputType = {
    username?: true
    friendname?: true
  }

  export type FriendshipMaxAggregateInputType = {
    username?: true
    friendname?: true
  }

  export type FriendshipCountAggregateInputType = {
    username?: true
    friendname?: true
    _all?: true
  }

  export type FriendshipAggregateArgs = {
    /**
     * Filter which Friendship to aggregate.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs = {
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithAggregationInput>
    by: Array<FriendshipScalarFieldEnum>
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }


  export type FriendshipGroupByOutputType = {
    username: string
    friendname: string
    _count: FriendshipCountAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect = {
    username?: boolean
    friendname?: boolean
    friend?: boolean | PlayerArgs
    himself?: boolean | PlayerArgs
  }

  export type FriendshipInclude = {
    friend?: boolean | PlayerArgs
    himself?: boolean | PlayerArgs
  }

  export type FriendshipGetPayload<
    S extends boolean | null | undefined | FriendshipArgs,
    U = keyof S
      > = S extends true
        ? Friendship
    : S extends undefined
    ? never
    : S extends FriendshipArgs | FriendshipFindManyArgs
    ?'include' extends U
    ? Friendship  & {
    [P in TrueKeys<S['include']>]:
        P extends 'friend' ? PlayerGetPayload<S['include'][P]> :
        P extends 'himself' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'friend' ? PlayerGetPayload<S['select'][P]> :
        P extends 'himself' ? PlayerGetPayload<S['select'][P]> :  P extends keyof Friendship ? Friendship[P] : never
  } 
    : Friendship
  : Friendship


  type FriendshipCountArgs = Merge<
    Omit<FriendshipFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipCountAggregateInputType | true
    }
  >

  export interface FriendshipDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendshipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friendship'> extends True ? CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>> : CheckSelect<T, Prisma__FriendshipClient<Friendship | null >, Prisma__FriendshipClient<FriendshipGetPayload<T> | null >>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendshipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friendship'> extends True ? CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>> : CheckSelect<T, Prisma__FriendshipClient<Friendship | null >, Prisma__FriendshipClient<FriendshipGetPayload<T> | null >>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const friendshipWithUsernameOnly = await prisma.friendship.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends FriendshipFindManyArgs>(
      args?: SelectSubset<T, FriendshipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Friendship>>, PrismaPromise<Array<FriendshipGetPayload<T>>>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
    **/
    create<T extends FriendshipCreateArgs>(
      args: SelectSubset<T, FriendshipCreateArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Create many Friendships.
     *     @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     *     @example
     *     // Create many Friendships
     *     const friendship = await prisma.friendship.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipCreateManyArgs>(
      args?: SelectSubset<T, FriendshipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipDeleteArgs>(
      args: SelectSubset<T, FriendshipDeleteArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipUpdateArgs>(
      args: SelectSubset<T, FriendshipUpdateArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipDeleteManyArgs>(
      args?: SelectSubset<T, FriendshipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipUpdateManyArgs>(
      args: SelectSubset<T, FriendshipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipUpsertArgs>(
      args: SelectSubset<T, FriendshipUpsertArgs>
    ): CheckSelect<T, Prisma__FriendshipClient<Friendship>, Prisma__FriendshipClient<FriendshipGetPayload<T>>>

    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    friend<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    himself<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Friendship findUnique
   */
  export type FriendshipFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Throw an Error if a Friendship can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Friendship to fetch.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship findFirst
   */
  export type FriendshipFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Throw an Error if a Friendship can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Friendship to fetch.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     * 
    **/
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendships to fetch.
     * 
    **/
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     * 
    **/
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     * 
    **/
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship create
   */
  export type FriendshipCreateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The data needed to create a Friendship.
     * 
    **/
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }


  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs = {
    /**
     * The data used to create many Friendships.
     * 
    **/
    data: Enumerable<FriendshipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The data needed to update a Friendship.
     * 
    **/
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs = {
    /**
     * The data used to update Friendships.
     * 
    **/
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     * 
    **/
    where?: FriendshipWhereInput
  }


  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     * 
    **/
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     * 
    **/
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }


  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
    /**
     * Filter which Friendship to delete.
     * 
    **/
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs = {
    /**
     * Filter which Friendships to delete
     * 
    **/
    where?: FriendshipWhereInput
  }


  /**
   * Friendship without action
   */
  export type FriendshipArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     * 
    **/
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FriendshipInclude | null
  }



  /**
   * Model Story
   */


  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    story_id: number | null
  }

  export type StorySumAggregateOutputType = {
    story_id: number | null
  }

  export type StoryMinAggregateOutputType = {
    story_id: number | null
    date: Date | null
  }

  export type StoryMaxAggregateOutputType = {
    story_id: number | null
    date: Date | null
  }

  export type StoryCountAggregateOutputType = {
    story_id: number
    date: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    story_id?: true
  }

  export type StorySumAggregateInputType = {
    story_id?: true
  }

  export type StoryMinAggregateInputType = {
    story_id?: true
    date?: true
  }

  export type StoryMaxAggregateInputType = {
    story_id?: true
    date?: true
  }

  export type StoryCountAggregateInputType = {
    story_id?: true
    date?: true
    _all?: true
  }

  export type StoryAggregateArgs = {
    /**
     * Filter which Story to aggregate.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs = {
    where?: StoryWhereInput
    orderBy?: Enumerable<StoryOrderByWithAggregationInput>
    by: Array<StoryScalarFieldEnum>
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }


  export type StoryGroupByOutputType = {
    story_id: number
    date: Date
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect = {
    story_id?: boolean
    date?: boolean
    contributed?: boolean | ParagraphFindManyArgs
    story?: boolean | ParticipantFindManyArgs
    quick_match?: boolean | Quick_matchArgs
    tale?: boolean | Tale_modeArgs
    _count?: boolean | StoryCountOutputTypeArgs
  }

  export type StoryInclude = {
    contributed?: boolean | ParagraphFindManyArgs
    story?: boolean | ParticipantFindManyArgs
    quick_match?: boolean | Quick_matchArgs
    tale?: boolean | Tale_modeArgs
    _count?: boolean | StoryCountOutputTypeArgs
  }

  export type StoryGetPayload<
    S extends boolean | null | undefined | StoryArgs,
    U = keyof S
      > = S extends true
        ? Story
    : S extends undefined
    ? never
    : S extends StoryArgs | StoryFindManyArgs
    ?'include' extends U
    ? Story  & {
    [P in TrueKeys<S['include']>]:
        P extends 'contributed' ? Array < ParagraphGetPayload<S['include'][P]>>  :
        P extends 'story' ? Array < ParticipantGetPayload<S['include'][P]>>  :
        P extends 'quick_match' ? Quick_matchGetPayload<S['include'][P]> | null :
        P extends 'tale' ? Tale_modeGetPayload<S['include'][P]> | null :
        P extends '_count' ? StoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'contributed' ? Array < ParagraphGetPayload<S['select'][P]>>  :
        P extends 'story' ? Array < ParticipantGetPayload<S['select'][P]>>  :
        P extends 'quick_match' ? Quick_matchGetPayload<S['select'][P]> | null :
        P extends 'tale' ? Tale_modeGetPayload<S['select'][P]> | null :
        P extends '_count' ? StoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Story ? Story[P] : never
  } 
    : Story
  : Story


  type StoryCountArgs = Merge<
    Omit<StoryFindManyArgs, 'select' | 'include'> & {
      select?: StoryCountAggregateInputType | true
    }
  >

  export interface StoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Story'> extends True ? CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>> : CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Story'> extends True ? CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>> : CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `story_id`
     * const storyWithStory_idOnly = await prisma.story.findMany({ select: { story_id: true } })
     * 
    **/
    findMany<T extends StoryFindManyArgs>(
      args?: SelectSubset<T, StoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Story>>, PrismaPromise<Array<StoryGetPayload<T>>>>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
    **/
    create<T extends StoryCreateArgs>(
      args: SelectSubset<T, StoryCreateArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Create many Stories.
     *     @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     *     @example
     *     // Create many Stories
     *     const story = await prisma.story.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoryCreateManyArgs>(
      args?: SelectSubset<T, StoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
    **/
    delete<T extends StoryDeleteArgs>(
      args: SelectSubset<T, StoryDeleteArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoryUpdateArgs>(
      args: SelectSubset<T, StoryUpdateArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoryDeleteManyArgs>(
      args?: SelectSubset<T, StoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoryUpdateManyArgs>(
      args: SelectSubset<T, StoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
    **/
    upsert<T extends StoryUpsertArgs>(
      args: SelectSubset<T, StoryUpsertArgs>
    ): CheckSelect<T, Prisma__StoryClient<Story>, Prisma__StoryClient<StoryGetPayload<T>>>

    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    contributed<T extends ParagraphFindManyArgs = {}>(args?: Subset<T, ParagraphFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Paragraph>>, PrismaPromise<Array<ParagraphGetPayload<T>>>>;

    story<T extends ParticipantFindManyArgs = {}>(args?: Subset<T, ParticipantFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>;

    quick_match<T extends Quick_matchArgs = {}>(args?: Subset<T, Quick_matchArgs>): CheckSelect<T, Prisma__Quick_matchClient<Quick_match | null >, Prisma__Quick_matchClient<Quick_matchGetPayload<T> | null >>;

    tale<T extends Tale_modeArgs = {}>(args?: Subset<T, Tale_modeArgs>): CheckSelect<T, Prisma__Tale_modeClient<Tale_mode | null >, Prisma__Tale_modeClient<Tale_modeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Throw an Error if a Story can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Story to fetch.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Throw an Error if a Story can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Story to fetch.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     * 
    **/
    distinct?: Enumerable<StoryScalarFieldEnum>
  }


  /**
   * Story findMany
   */
  export type StoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Filter, which Stories to fetch.
     * 
    **/
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     * 
    **/
    orderBy?: Enumerable<StoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     * 
    **/
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StoryScalarFieldEnum>
  }


  /**
   * Story create
   */
  export type StoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The data needed to create a Story.
     * 
    **/
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }


  /**
   * Story createMany
   */
  export type StoryCreateManyArgs = {
    /**
     * The data used to create many Stories.
     * 
    **/
    data: Enumerable<StoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Story update
   */
  export type StoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The data needed to update a Story.
     * 
    **/
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs = {
    /**
     * The data used to update Stories.
     * 
    **/
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     * 
    **/
    where?: StoryWhereInput
  }


  /**
   * Story upsert
   */
  export type StoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * The filter to search for the Story to update in case it exists.
     * 
    **/
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     * 
    **/
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }


  /**
   * Story delete
   */
  export type StoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
    /**
     * Filter which Story to delete.
     * 
    **/
    where: StoryWhereUniqueInput
  }


  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs = {
    /**
     * Filter which Stories to delete
     * 
    **/
    where?: StoryWhereInput
  }


  /**
   * Story without action
   */
  export type StoryArgs = {
    /**
     * Select specific fields to fetch from the Story
     * 
    **/
    select?: StorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StoryInclude | null
  }



  /**
   * Model Participant
   */


  export type AggregateParticipant = {
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  export type ParticipantAvgAggregateOutputType = {
    story_id: number | null
  }

  export type ParticipantSumAggregateOutputType = {
    story_id: number | null
  }

  export type ParticipantMinAggregateOutputType = {
    username: string | null
    story_id: number | null
    voted: string | null
    creator: boolean | null
  }

  export type ParticipantMaxAggregateOutputType = {
    username: string | null
    story_id: number | null
    voted: string | null
    creator: boolean | null
  }

  export type ParticipantCountAggregateOutputType = {
    username: number
    story_id: number
    voted: number
    creator: number
    _all: number
  }


  export type ParticipantAvgAggregateInputType = {
    story_id?: true
  }

  export type ParticipantSumAggregateInputType = {
    story_id?: true
  }

  export type ParticipantMinAggregateInputType = {
    username?: true
    story_id?: true
    voted?: true
    creator?: true
  }

  export type ParticipantMaxAggregateInputType = {
    username?: true
    story_id?: true
    voted?: true
    creator?: true
  }

  export type ParticipantCountAggregateInputType = {
    username?: true
    story_id?: true
    voted?: true
    creator?: true
    _all?: true
  }

  export type ParticipantAggregateArgs = {
    /**
     * Filter which Participant to aggregate.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Participants
    **/
    _count?: true | ParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipantMaxAggregateInputType
  }

  export type GetParticipantAggregateType<T extends ParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipant[P]>
      : GetScalarType<T[P], AggregateParticipant[P]>
  }




  export type ParticipantGroupByArgs = {
    where?: ParticipantWhereInput
    orderBy?: Enumerable<ParticipantOrderByWithAggregationInput>
    by: Array<ParticipantScalarFieldEnum>
    having?: ParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipantCountAggregateInputType | true
    _avg?: ParticipantAvgAggregateInputType
    _sum?: ParticipantSumAggregateInputType
    _min?: ParticipantMinAggregateInputType
    _max?: ParticipantMaxAggregateInputType
  }


  export type ParticipantGroupByOutputType = {
    username: string
    story_id: number
    voted: string
    creator: boolean
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  type GetParticipantGroupByPayload<T extends ParticipantGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ParticipantSelect = {
    username?: boolean
    story_id?: boolean
    voted?: boolean
    creator?: boolean
    story?: boolean | StoryArgs
    participant?: boolean | PlayerArgs
  }

  export type ParticipantInclude = {
    story?: boolean | StoryArgs
    participant?: boolean | PlayerArgs
  }

  export type ParticipantGetPayload<
    S extends boolean | null | undefined | ParticipantArgs,
    U = keyof S
      > = S extends true
        ? Participant
    : S extends undefined
    ? never
    : S extends ParticipantArgs | ParticipantFindManyArgs
    ?'include' extends U
    ? Participant  & {
    [P in TrueKeys<S['include']>]:
        P extends 'story' ? StoryGetPayload<S['include'][P]> :
        P extends 'participant' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'story' ? StoryGetPayload<S['select'][P]> :
        P extends 'participant' ? PlayerGetPayload<S['select'][P]> :  P extends keyof Participant ? Participant[P] : never
  } 
    : Participant
  : Participant


  type ParticipantCountArgs = Merge<
    Omit<ParticipantFindManyArgs, 'select' | 'include'> & {
      select?: ParticipantCountAggregateInputType | true
    }
  >

  export interface ParticipantDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Participant that matches the filter.
     * @param {ParticipantFindUniqueArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParticipantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParticipantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Participant'> extends True ? CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>> : CheckSelect<T, Prisma__ParticipantClient<Participant | null >, Prisma__ParticipantClient<ParticipantGetPayload<T> | null >>

    /**
     * Find the first Participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindFirstArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParticipantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParticipantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Participant'> extends True ? CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>> : CheckSelect<T, Prisma__ParticipantClient<Participant | null >, Prisma__ParticipantClient<ParticipantGetPayload<T> | null >>

    /**
     * Find zero or more Participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participants
     * const participants = await prisma.participant.findMany()
     * 
     * // Get first 10 Participants
     * const participants = await prisma.participant.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const participantWithUsernameOnly = await prisma.participant.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends ParticipantFindManyArgs>(
      args?: SelectSubset<T, ParticipantFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>

    /**
     * Create a Participant.
     * @param {ParticipantCreateArgs} args - Arguments to create a Participant.
     * @example
     * // Create one Participant
     * const Participant = await prisma.participant.create({
     *   data: {
     *     // ... data to create a Participant
     *   }
     * })
     * 
    **/
    create<T extends ParticipantCreateArgs>(
      args: SelectSubset<T, ParticipantCreateArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Create many Participants.
     *     @param {ParticipantCreateManyArgs} args - Arguments to create many Participants.
     *     @example
     *     // Create many Participants
     *     const participant = await prisma.participant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParticipantCreateManyArgs>(
      args?: SelectSubset<T, ParticipantCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Participant.
     * @param {ParticipantDeleteArgs} args - Arguments to delete one Participant.
     * @example
     * // Delete one Participant
     * const Participant = await prisma.participant.delete({
     *   where: {
     *     // ... filter to delete one Participant
     *   }
     * })
     * 
    **/
    delete<T extends ParticipantDeleteArgs>(
      args: SelectSubset<T, ParticipantDeleteArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Update one Participant.
     * @param {ParticipantUpdateArgs} args - Arguments to update one Participant.
     * @example
     * // Update one Participant
     * const participant = await prisma.participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParticipantUpdateArgs>(
      args: SelectSubset<T, ParticipantUpdateArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Delete zero or more Participants.
     * @param {ParticipantDeleteManyArgs} args - Arguments to filter Participants to delete.
     * @example
     * // Delete a few Participants
     * const { count } = await prisma.participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParticipantDeleteManyArgs>(
      args?: SelectSubset<T, ParticipantDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParticipantUpdateManyArgs>(
      args: SelectSubset<T, ParticipantUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Participant.
     * @param {ParticipantUpsertArgs} args - Arguments to update or create a Participant.
     * @example
     * // Update or create a Participant
     * const participant = await prisma.participant.upsert({
     *   create: {
     *     // ... data to create a Participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participant we want to update
     *   }
     * })
    **/
    upsert<T extends ParticipantUpsertArgs>(
      args: SelectSubset<T, ParticipantUpsertArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Count the number of Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantCountArgs} args - Arguments to filter Participants to count.
     * @example
     * // Count the number of Participants
     * const count = await prisma.participant.count({
     *   where: {
     *     // ... the filter for the Participants we want to count
     *   }
     * })
    **/
    count<T extends ParticipantCountArgs>(
      args?: Subset<T, ParticipantCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipantAggregateArgs>(args: Subset<T, ParticipantAggregateArgs>): PrismaPromise<GetParticipantAggregateType<T>>

    /**
     * Group by Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParticipantClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    story<T extends StoryArgs = {}>(args?: Subset<T, StoryArgs>): CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>;

    participant<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Participant findUnique
   */
  export type ParticipantFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Throw an Error if a Participant can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Participant to fetch.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant findFirst
   */
  export type ParticipantFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Throw an Error if a Participant can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Participant to fetch.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Participants.
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Participants.
     * 
    **/
    distinct?: Enumerable<ParticipantScalarFieldEnum>
  }


  /**
   * Participant findMany
   */
  export type ParticipantFindManyArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Filter, which Participants to fetch.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Participants.
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ParticipantScalarFieldEnum>
  }


  /**
   * Participant create
   */
  export type ParticipantCreateArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The data needed to create a Participant.
     * 
    **/
    data: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
  }


  /**
   * Participant createMany
   */
  export type ParticipantCreateManyArgs = {
    /**
     * The data used to create many Participants.
     * 
    **/
    data: Enumerable<ParticipantCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Participant update
   */
  export type ParticipantUpdateArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The data needed to update a Participant.
     * 
    **/
    data: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
    /**
     * Choose, which Participant to update.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant updateMany
   */
  export type ParticipantUpdateManyArgs = {
    /**
     * The data used to update Participants.
     * 
    **/
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyInput>
    /**
     * Filter which Participants to update
     * 
    **/
    where?: ParticipantWhereInput
  }


  /**
   * Participant upsert
   */
  export type ParticipantUpsertArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The filter to search for the Participant to update in case it exists.
     * 
    **/
    where: ParticipantWhereUniqueInput
    /**
     * In case the Participant found by the `where` argument doesn't exist, create a new Participant with this data.
     * 
    **/
    create: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
    /**
     * In case the Participant was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
  }


  /**
   * Participant delete
   */
  export type ParticipantDeleteArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Filter which Participant to delete.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant deleteMany
   */
  export type ParticipantDeleteManyArgs = {
    /**
     * Filter which Participants to delete
     * 
    **/
    where?: ParticipantWhereInput
  }


  /**
   * Participant without action
   */
  export type ParticipantArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
  }



  /**
   * Model Tale_mode
   */


  export type AggregateTale_mode = {
    _count: Tale_modeCountAggregateOutputType | null
    _avg: Tale_modeAvgAggregateOutputType | null
    _sum: Tale_modeSumAggregateOutputType | null
    _min: Tale_modeMinAggregateOutputType | null
    _max: Tale_modeMaxAggregateOutputType | null
  }

  export type Tale_modeAvgAggregateOutputType = {
    story_id: number | null
    max_turns: number | null
    max_paragraph_chars: number | null
    turn: number | null
  }

  export type Tale_modeSumAggregateOutputType = {
    story_id: number | null
    max_turns: number | null
    max_paragraph_chars: number | null
    turn: number | null
  }

  export type Tale_modeMinAggregateOutputType = {
    story_id: number | null
    max_turns: number | null
    max_paragraph_chars: number | null
    privacy: boolean | null
    finished: boolean | null
    scored: boolean | null
    title: string | null
    turn: number | null
  }

  export type Tale_modeMaxAggregateOutputType = {
    story_id: number | null
    max_turns: number | null
    max_paragraph_chars: number | null
    privacy: boolean | null
    finished: boolean | null
    scored: boolean | null
    title: string | null
    turn: number | null
  }

  export type Tale_modeCountAggregateOutputType = {
    story_id: number
    max_turns: number
    max_paragraph_chars: number
    privacy: number
    finished: number
    scored: number
    title: number
    turn: number
    _all: number
  }


  export type Tale_modeAvgAggregateInputType = {
    story_id?: true
    max_turns?: true
    max_paragraph_chars?: true
    turn?: true
  }

  export type Tale_modeSumAggregateInputType = {
    story_id?: true
    max_turns?: true
    max_paragraph_chars?: true
    turn?: true
  }

  export type Tale_modeMinAggregateInputType = {
    story_id?: true
    max_turns?: true
    max_paragraph_chars?: true
    privacy?: true
    finished?: true
    scored?: true
    title?: true
    turn?: true
  }

  export type Tale_modeMaxAggregateInputType = {
    story_id?: true
    max_turns?: true
    max_paragraph_chars?: true
    privacy?: true
    finished?: true
    scored?: true
    title?: true
    turn?: true
  }

  export type Tale_modeCountAggregateInputType = {
    story_id?: true
    max_turns?: true
    max_paragraph_chars?: true
    privacy?: true
    finished?: true
    scored?: true
    title?: true
    turn?: true
    _all?: true
  }

  export type Tale_modeAggregateArgs = {
    /**
     * Filter which Tale_mode to aggregate.
     * 
    **/
    where?: Tale_modeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tale_modes to fetch.
     * 
    **/
    orderBy?: Enumerable<Tale_modeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Tale_modeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tale_modes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tale_modes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tale_modes
    **/
    _count?: true | Tale_modeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tale_modeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tale_modeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tale_modeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tale_modeMaxAggregateInputType
  }

  export type GetTale_modeAggregateType<T extends Tale_modeAggregateArgs> = {
        [P in keyof T & keyof AggregateTale_mode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTale_mode[P]>
      : GetScalarType<T[P], AggregateTale_mode[P]>
  }




  export type Tale_modeGroupByArgs = {
    where?: Tale_modeWhereInput
    orderBy?: Enumerable<Tale_modeOrderByWithAggregationInput>
    by: Array<Tale_modeScalarFieldEnum>
    having?: Tale_modeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tale_modeCountAggregateInputType | true
    _avg?: Tale_modeAvgAggregateInputType
    _sum?: Tale_modeSumAggregateInputType
    _min?: Tale_modeMinAggregateInputType
    _max?: Tale_modeMaxAggregateInputType
  }


  export type Tale_modeGroupByOutputType = {
    story_id: number
    max_turns: number
    max_paragraph_chars: number
    privacy: boolean
    finished: boolean
    scored: boolean
    title: string
    turn: number
    _count: Tale_modeCountAggregateOutputType | null
    _avg: Tale_modeAvgAggregateOutputType | null
    _sum: Tale_modeSumAggregateOutputType | null
    _min: Tale_modeMinAggregateOutputType | null
    _max: Tale_modeMaxAggregateOutputType | null
  }

  type GetTale_modeGroupByPayload<T extends Tale_modeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tale_modeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tale_modeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tale_modeGroupByOutputType[P]>
            : GetScalarType<T[P], Tale_modeGroupByOutputType[P]>
        }
      >
    >


  export type Tale_modeSelect = {
    story_id?: boolean
    max_turns?: boolean
    max_paragraph_chars?: boolean
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title?: boolean
    turn?: boolean
    tale?: boolean | StoryArgs
  }

  export type Tale_modeInclude = {
    tale?: boolean | StoryArgs
  }

  export type Tale_modeGetPayload<
    S extends boolean | null | undefined | Tale_modeArgs,
    U = keyof S
      > = S extends true
        ? Tale_mode
    : S extends undefined
    ? never
    : S extends Tale_modeArgs | Tale_modeFindManyArgs
    ?'include' extends U
    ? Tale_mode  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tale' ? StoryGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tale' ? StoryGetPayload<S['select'][P]> :  P extends keyof Tale_mode ? Tale_mode[P] : never
  } 
    : Tale_mode
  : Tale_mode


  type Tale_modeCountArgs = Merge<
    Omit<Tale_modeFindManyArgs, 'select' | 'include'> & {
      select?: Tale_modeCountAggregateInputType | true
    }
  >

  export interface Tale_modeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tale_mode that matches the filter.
     * @param {Tale_modeFindUniqueArgs} args - Arguments to find a Tale_mode
     * @example
     * // Get one Tale_mode
     * const tale_mode = await prisma.tale_mode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Tale_modeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Tale_modeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tale_mode'> extends True ? CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>> : CheckSelect<T, Prisma__Tale_modeClient<Tale_mode | null >, Prisma__Tale_modeClient<Tale_modeGetPayload<T> | null >>

    /**
     * Find the first Tale_mode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeFindFirstArgs} args - Arguments to find a Tale_mode
     * @example
     * // Get one Tale_mode
     * const tale_mode = await prisma.tale_mode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Tale_modeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Tale_modeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tale_mode'> extends True ? CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>> : CheckSelect<T, Prisma__Tale_modeClient<Tale_mode | null >, Prisma__Tale_modeClient<Tale_modeGetPayload<T> | null >>

    /**
     * Find zero or more Tale_modes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tale_modes
     * const tale_modes = await prisma.tale_mode.findMany()
     * 
     * // Get first 10 Tale_modes
     * const tale_modes = await prisma.tale_mode.findMany({ take: 10 })
     * 
     * // Only select the `story_id`
     * const tale_modeWithStory_idOnly = await prisma.tale_mode.findMany({ select: { story_id: true } })
     * 
    **/
    findMany<T extends Tale_modeFindManyArgs>(
      args?: SelectSubset<T, Tale_modeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tale_mode>>, PrismaPromise<Array<Tale_modeGetPayload<T>>>>

    /**
     * Create a Tale_mode.
     * @param {Tale_modeCreateArgs} args - Arguments to create a Tale_mode.
     * @example
     * // Create one Tale_mode
     * const Tale_mode = await prisma.tale_mode.create({
     *   data: {
     *     // ... data to create a Tale_mode
     *   }
     * })
     * 
    **/
    create<T extends Tale_modeCreateArgs>(
      args: SelectSubset<T, Tale_modeCreateArgs>
    ): CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>>

    /**
     * Create many Tale_modes.
     *     @param {Tale_modeCreateManyArgs} args - Arguments to create many Tale_modes.
     *     @example
     *     // Create many Tale_modes
     *     const tale_mode = await prisma.tale_mode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Tale_modeCreateManyArgs>(
      args?: SelectSubset<T, Tale_modeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tale_mode.
     * @param {Tale_modeDeleteArgs} args - Arguments to delete one Tale_mode.
     * @example
     * // Delete one Tale_mode
     * const Tale_mode = await prisma.tale_mode.delete({
     *   where: {
     *     // ... filter to delete one Tale_mode
     *   }
     * })
     * 
    **/
    delete<T extends Tale_modeDeleteArgs>(
      args: SelectSubset<T, Tale_modeDeleteArgs>
    ): CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>>

    /**
     * Update one Tale_mode.
     * @param {Tale_modeUpdateArgs} args - Arguments to update one Tale_mode.
     * @example
     * // Update one Tale_mode
     * const tale_mode = await prisma.tale_mode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Tale_modeUpdateArgs>(
      args: SelectSubset<T, Tale_modeUpdateArgs>
    ): CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>>

    /**
     * Delete zero or more Tale_modes.
     * @param {Tale_modeDeleteManyArgs} args - Arguments to filter Tale_modes to delete.
     * @example
     * // Delete a few Tale_modes
     * const { count } = await prisma.tale_mode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Tale_modeDeleteManyArgs>(
      args?: SelectSubset<T, Tale_modeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tale_modes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tale_modes
     * const tale_mode = await prisma.tale_mode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Tale_modeUpdateManyArgs>(
      args: SelectSubset<T, Tale_modeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tale_mode.
     * @param {Tale_modeUpsertArgs} args - Arguments to update or create a Tale_mode.
     * @example
     * // Update or create a Tale_mode
     * const tale_mode = await prisma.tale_mode.upsert({
     *   create: {
     *     // ... data to create a Tale_mode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tale_mode we want to update
     *   }
     * })
    **/
    upsert<T extends Tale_modeUpsertArgs>(
      args: SelectSubset<T, Tale_modeUpsertArgs>
    ): CheckSelect<T, Prisma__Tale_modeClient<Tale_mode>, Prisma__Tale_modeClient<Tale_modeGetPayload<T>>>

    /**
     * Count the number of Tale_modes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeCountArgs} args - Arguments to filter Tale_modes to count.
     * @example
     * // Count the number of Tale_modes
     * const count = await prisma.tale_mode.count({
     *   where: {
     *     // ... the filter for the Tale_modes we want to count
     *   }
     * })
    **/
    count<T extends Tale_modeCountArgs>(
      args?: Subset<T, Tale_modeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tale_modeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tale_mode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tale_modeAggregateArgs>(args: Subset<T, Tale_modeAggregateArgs>): PrismaPromise<GetTale_modeAggregateType<T>>

    /**
     * Group by Tale_mode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tale_modeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tale_modeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tale_modeGroupByArgs['orderBy'] }
        : { orderBy?: Tale_modeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tale_modeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTale_modeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tale_mode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Tale_modeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tale<T extends StoryArgs = {}>(args?: Subset<T, StoryArgs>): CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tale_mode findUnique
   */
  export type Tale_modeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * Throw an Error if a Tale_mode can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tale_mode to fetch.
     * 
    **/
    where: Tale_modeWhereUniqueInput
  }


  /**
   * Tale_mode findFirst
   */
  export type Tale_modeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * Throw an Error if a Tale_mode can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tale_mode to fetch.
     * 
    **/
    where?: Tale_modeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tale_modes to fetch.
     * 
    **/
    orderBy?: Enumerable<Tale_modeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tale_modes.
     * 
    **/
    cursor?: Tale_modeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tale_modes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tale_modes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tale_modes.
     * 
    **/
    distinct?: Enumerable<Tale_modeScalarFieldEnum>
  }


  /**
   * Tale_mode findMany
   */
  export type Tale_modeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * Filter, which Tale_modes to fetch.
     * 
    **/
    where?: Tale_modeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tale_modes to fetch.
     * 
    **/
    orderBy?: Enumerable<Tale_modeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tale_modes.
     * 
    **/
    cursor?: Tale_modeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tale_modes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tale_modes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tale_modeScalarFieldEnum>
  }


  /**
   * Tale_mode create
   */
  export type Tale_modeCreateArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * The data needed to create a Tale_mode.
     * 
    **/
    data: XOR<Tale_modeCreateInput, Tale_modeUncheckedCreateInput>
  }


  /**
   * Tale_mode createMany
   */
  export type Tale_modeCreateManyArgs = {
    /**
     * The data used to create many Tale_modes.
     * 
    **/
    data: Enumerable<Tale_modeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tale_mode update
   */
  export type Tale_modeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * The data needed to update a Tale_mode.
     * 
    **/
    data: XOR<Tale_modeUpdateInput, Tale_modeUncheckedUpdateInput>
    /**
     * Choose, which Tale_mode to update.
     * 
    **/
    where: Tale_modeWhereUniqueInput
  }


  /**
   * Tale_mode updateMany
   */
  export type Tale_modeUpdateManyArgs = {
    /**
     * The data used to update Tale_modes.
     * 
    **/
    data: XOR<Tale_modeUpdateManyMutationInput, Tale_modeUncheckedUpdateManyInput>
    /**
     * Filter which Tale_modes to update
     * 
    **/
    where?: Tale_modeWhereInput
  }


  /**
   * Tale_mode upsert
   */
  export type Tale_modeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * The filter to search for the Tale_mode to update in case it exists.
     * 
    **/
    where: Tale_modeWhereUniqueInput
    /**
     * In case the Tale_mode found by the `where` argument doesn't exist, create a new Tale_mode with this data.
     * 
    **/
    create: XOR<Tale_modeCreateInput, Tale_modeUncheckedCreateInput>
    /**
     * In case the Tale_mode was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Tale_modeUpdateInput, Tale_modeUncheckedUpdateInput>
  }


  /**
   * Tale_mode delete
   */
  export type Tale_modeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
    /**
     * Filter which Tale_mode to delete.
     * 
    **/
    where: Tale_modeWhereUniqueInput
  }


  /**
   * Tale_mode deleteMany
   */
  export type Tale_modeDeleteManyArgs = {
    /**
     * Filter which Tale_modes to delete
     * 
    **/
    where?: Tale_modeWhereInput
  }


  /**
   * Tale_mode without action
   */
  export type Tale_modeArgs = {
    /**
     * Select specific fields to fetch from the Tale_mode
     * 
    **/
    select?: Tale_modeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Tale_modeInclude | null
  }



  /**
   * Model Quick_match
   */


  export type AggregateQuick_match = {
    _count: Quick_matchCountAggregateOutputType | null
    _avg: Quick_matchAvgAggregateOutputType | null
    _sum: Quick_matchSumAggregateOutputType | null
    _min: Quick_matchMinAggregateOutputType | null
    _max: Quick_matchMaxAggregateOutputType | null
  }

  export type Quick_matchAvgAggregateOutputType = {
    story_id: number | null
    mode: number | null
  }

  export type Quick_matchSumAggregateOutputType = {
    story_id: number | null
    mode: number | null
  }

  export type Quick_matchMinAggregateOutputType = {
    story_id: number | null
    mode: number | null
  }

  export type Quick_matchMaxAggregateOutputType = {
    story_id: number | null
    mode: number | null
  }

  export type Quick_matchCountAggregateOutputType = {
    story_id: number
    mode: number
    _all: number
  }


  export type Quick_matchAvgAggregateInputType = {
    story_id?: true
    mode?: true
  }

  export type Quick_matchSumAggregateInputType = {
    story_id?: true
    mode?: true
  }

  export type Quick_matchMinAggregateInputType = {
    story_id?: true
    mode?: true
  }

  export type Quick_matchMaxAggregateInputType = {
    story_id?: true
    mode?: true
  }

  export type Quick_matchCountAggregateInputType = {
    story_id?: true
    mode?: true
    _all?: true
  }

  export type Quick_matchAggregateArgs = {
    /**
     * Filter which Quick_match to aggregate.
     * 
    **/
    where?: Quick_matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quick_matches to fetch.
     * 
    **/
    orderBy?: Enumerable<Quick_matchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Quick_matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quick_matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quick_matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quick_matches
    **/
    _count?: true | Quick_matchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Quick_matchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Quick_matchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Quick_matchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Quick_matchMaxAggregateInputType
  }

  export type GetQuick_matchAggregateType<T extends Quick_matchAggregateArgs> = {
        [P in keyof T & keyof AggregateQuick_match]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuick_match[P]>
      : GetScalarType<T[P], AggregateQuick_match[P]>
  }




  export type Quick_matchGroupByArgs = {
    where?: Quick_matchWhereInput
    orderBy?: Enumerable<Quick_matchOrderByWithAggregationInput>
    by: Array<Quick_matchScalarFieldEnum>
    having?: Quick_matchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Quick_matchCountAggregateInputType | true
    _avg?: Quick_matchAvgAggregateInputType
    _sum?: Quick_matchSumAggregateInputType
    _min?: Quick_matchMinAggregateInputType
    _max?: Quick_matchMaxAggregateInputType
  }


  export type Quick_matchGroupByOutputType = {
    story_id: number
    mode: number
    _count: Quick_matchCountAggregateOutputType | null
    _avg: Quick_matchAvgAggregateOutputType | null
    _sum: Quick_matchSumAggregateOutputType | null
    _min: Quick_matchMinAggregateOutputType | null
    _max: Quick_matchMaxAggregateOutputType | null
  }

  type GetQuick_matchGroupByPayload<T extends Quick_matchGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Quick_matchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Quick_matchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Quick_matchGroupByOutputType[P]>
            : GetScalarType<T[P], Quick_matchGroupByOutputType[P]>
        }
      >
    >


  export type Quick_matchSelect = {
    story_id?: boolean
    mode?: boolean
    quick_match?: boolean | StoryArgs
  }

  export type Quick_matchInclude = {
    quick_match?: boolean | StoryArgs
  }

  export type Quick_matchGetPayload<
    S extends boolean | null | undefined | Quick_matchArgs,
    U = keyof S
      > = S extends true
        ? Quick_match
    : S extends undefined
    ? never
    : S extends Quick_matchArgs | Quick_matchFindManyArgs
    ?'include' extends U
    ? Quick_match  & {
    [P in TrueKeys<S['include']>]:
        P extends 'quick_match' ? StoryGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'quick_match' ? StoryGetPayload<S['select'][P]> :  P extends keyof Quick_match ? Quick_match[P] : never
  } 
    : Quick_match
  : Quick_match


  type Quick_matchCountArgs = Merge<
    Omit<Quick_matchFindManyArgs, 'select' | 'include'> & {
      select?: Quick_matchCountAggregateInputType | true
    }
  >

  export interface Quick_matchDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Quick_match that matches the filter.
     * @param {Quick_matchFindUniqueArgs} args - Arguments to find a Quick_match
     * @example
     * // Get one Quick_match
     * const quick_match = await prisma.quick_match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Quick_matchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Quick_matchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Quick_match'> extends True ? CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>> : CheckSelect<T, Prisma__Quick_matchClient<Quick_match | null >, Prisma__Quick_matchClient<Quick_matchGetPayload<T> | null >>

    /**
     * Find the first Quick_match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchFindFirstArgs} args - Arguments to find a Quick_match
     * @example
     * // Get one Quick_match
     * const quick_match = await prisma.quick_match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Quick_matchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Quick_matchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Quick_match'> extends True ? CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>> : CheckSelect<T, Prisma__Quick_matchClient<Quick_match | null >, Prisma__Quick_matchClient<Quick_matchGetPayload<T> | null >>

    /**
     * Find zero or more Quick_matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quick_matches
     * const quick_matches = await prisma.quick_match.findMany()
     * 
     * // Get first 10 Quick_matches
     * const quick_matches = await prisma.quick_match.findMany({ take: 10 })
     * 
     * // Only select the `story_id`
     * const quick_matchWithStory_idOnly = await prisma.quick_match.findMany({ select: { story_id: true } })
     * 
    **/
    findMany<T extends Quick_matchFindManyArgs>(
      args?: SelectSubset<T, Quick_matchFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Quick_match>>, PrismaPromise<Array<Quick_matchGetPayload<T>>>>

    /**
     * Create a Quick_match.
     * @param {Quick_matchCreateArgs} args - Arguments to create a Quick_match.
     * @example
     * // Create one Quick_match
     * const Quick_match = await prisma.quick_match.create({
     *   data: {
     *     // ... data to create a Quick_match
     *   }
     * })
     * 
    **/
    create<T extends Quick_matchCreateArgs>(
      args: SelectSubset<T, Quick_matchCreateArgs>
    ): CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>>

    /**
     * Create many Quick_matches.
     *     @param {Quick_matchCreateManyArgs} args - Arguments to create many Quick_matches.
     *     @example
     *     // Create many Quick_matches
     *     const quick_match = await prisma.quick_match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Quick_matchCreateManyArgs>(
      args?: SelectSubset<T, Quick_matchCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Quick_match.
     * @param {Quick_matchDeleteArgs} args - Arguments to delete one Quick_match.
     * @example
     * // Delete one Quick_match
     * const Quick_match = await prisma.quick_match.delete({
     *   where: {
     *     // ... filter to delete one Quick_match
     *   }
     * })
     * 
    **/
    delete<T extends Quick_matchDeleteArgs>(
      args: SelectSubset<T, Quick_matchDeleteArgs>
    ): CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>>

    /**
     * Update one Quick_match.
     * @param {Quick_matchUpdateArgs} args - Arguments to update one Quick_match.
     * @example
     * // Update one Quick_match
     * const quick_match = await prisma.quick_match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Quick_matchUpdateArgs>(
      args: SelectSubset<T, Quick_matchUpdateArgs>
    ): CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>>

    /**
     * Delete zero or more Quick_matches.
     * @param {Quick_matchDeleteManyArgs} args - Arguments to filter Quick_matches to delete.
     * @example
     * // Delete a few Quick_matches
     * const { count } = await prisma.quick_match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Quick_matchDeleteManyArgs>(
      args?: SelectSubset<T, Quick_matchDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quick_matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quick_matches
     * const quick_match = await prisma.quick_match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Quick_matchUpdateManyArgs>(
      args: SelectSubset<T, Quick_matchUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Quick_match.
     * @param {Quick_matchUpsertArgs} args - Arguments to update or create a Quick_match.
     * @example
     * // Update or create a Quick_match
     * const quick_match = await prisma.quick_match.upsert({
     *   create: {
     *     // ... data to create a Quick_match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quick_match we want to update
     *   }
     * })
    **/
    upsert<T extends Quick_matchUpsertArgs>(
      args: SelectSubset<T, Quick_matchUpsertArgs>
    ): CheckSelect<T, Prisma__Quick_matchClient<Quick_match>, Prisma__Quick_matchClient<Quick_matchGetPayload<T>>>

    /**
     * Count the number of Quick_matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchCountArgs} args - Arguments to filter Quick_matches to count.
     * @example
     * // Count the number of Quick_matches
     * const count = await prisma.quick_match.count({
     *   where: {
     *     // ... the filter for the Quick_matches we want to count
     *   }
     * })
    **/
    count<T extends Quick_matchCountArgs>(
      args?: Subset<T, Quick_matchCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Quick_matchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quick_match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Quick_matchAggregateArgs>(args: Subset<T, Quick_matchAggregateArgs>): PrismaPromise<GetQuick_matchAggregateType<T>>

    /**
     * Group by Quick_match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Quick_matchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Quick_matchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Quick_matchGroupByArgs['orderBy'] }
        : { orderBy?: Quick_matchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Quick_matchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuick_matchGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quick_match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Quick_matchClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    quick_match<T extends StoryArgs = {}>(args?: Subset<T, StoryArgs>): CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Quick_match findUnique
   */
  export type Quick_matchFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * Throw an Error if a Quick_match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Quick_match to fetch.
     * 
    **/
    where: Quick_matchWhereUniqueInput
  }


  /**
   * Quick_match findFirst
   */
  export type Quick_matchFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * Throw an Error if a Quick_match can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Quick_match to fetch.
     * 
    **/
    where?: Quick_matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quick_matches to fetch.
     * 
    **/
    orderBy?: Enumerable<Quick_matchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quick_matches.
     * 
    **/
    cursor?: Quick_matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quick_matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quick_matches.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quick_matches.
     * 
    **/
    distinct?: Enumerable<Quick_matchScalarFieldEnum>
  }


  /**
   * Quick_match findMany
   */
  export type Quick_matchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * Filter, which Quick_matches to fetch.
     * 
    **/
    where?: Quick_matchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quick_matches to fetch.
     * 
    **/
    orderBy?: Enumerable<Quick_matchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quick_matches.
     * 
    **/
    cursor?: Quick_matchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quick_matches from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quick_matches.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Quick_matchScalarFieldEnum>
  }


  /**
   * Quick_match create
   */
  export type Quick_matchCreateArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * The data needed to create a Quick_match.
     * 
    **/
    data: XOR<Quick_matchCreateInput, Quick_matchUncheckedCreateInput>
  }


  /**
   * Quick_match createMany
   */
  export type Quick_matchCreateManyArgs = {
    /**
     * The data used to create many Quick_matches.
     * 
    **/
    data: Enumerable<Quick_matchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Quick_match update
   */
  export type Quick_matchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * The data needed to update a Quick_match.
     * 
    **/
    data: XOR<Quick_matchUpdateInput, Quick_matchUncheckedUpdateInput>
    /**
     * Choose, which Quick_match to update.
     * 
    **/
    where: Quick_matchWhereUniqueInput
  }


  /**
   * Quick_match updateMany
   */
  export type Quick_matchUpdateManyArgs = {
    /**
     * The data used to update Quick_matches.
     * 
    **/
    data: XOR<Quick_matchUpdateManyMutationInput, Quick_matchUncheckedUpdateManyInput>
    /**
     * Filter which Quick_matches to update
     * 
    **/
    where?: Quick_matchWhereInput
  }


  /**
   * Quick_match upsert
   */
  export type Quick_matchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * The filter to search for the Quick_match to update in case it exists.
     * 
    **/
    where: Quick_matchWhereUniqueInput
    /**
     * In case the Quick_match found by the `where` argument doesn't exist, create a new Quick_match with this data.
     * 
    **/
    create: XOR<Quick_matchCreateInput, Quick_matchUncheckedCreateInput>
    /**
     * In case the Quick_match was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Quick_matchUpdateInput, Quick_matchUncheckedUpdateInput>
  }


  /**
   * Quick_match delete
   */
  export type Quick_matchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
    /**
     * Filter which Quick_match to delete.
     * 
    **/
    where: Quick_matchWhereUniqueInput
  }


  /**
   * Quick_match deleteMany
   */
  export type Quick_matchDeleteManyArgs = {
    /**
     * Filter which Quick_matches to delete
     * 
    **/
    where?: Quick_matchWhereInput
  }


  /**
   * Quick_match without action
   */
  export type Quick_matchArgs = {
    /**
     * Select specific fields to fetch from the Quick_match
     * 
    **/
    select?: Quick_matchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Quick_matchInclude | null
  }



  /**
   * Model Paragraph
   */


  export type AggregateParagraph = {
    _count: ParagraphCountAggregateOutputType | null
    _avg: ParagraphAvgAggregateOutputType | null
    _sum: ParagraphSumAggregateOutputType | null
    _min: ParagraphMinAggregateOutputType | null
    _max: ParagraphMaxAggregateOutputType | null
  }

  export type ParagraphAvgAggregateOutputType = {
    Score: number | null
    turn_number: number | null
    story_id: number | null
  }

  export type ParagraphSumAggregateOutputType = {
    Score: number | null
    turn_number: number | null
    story_id: number | null
  }

  export type ParagraphMinAggregateOutputType = {
    text: string | null
    Score: number | null
    turn_number: number | null
    username: string | null
    story_id: number | null
  }

  export type ParagraphMaxAggregateOutputType = {
    text: string | null
    Score: number | null
    turn_number: number | null
    username: string | null
    story_id: number | null
  }

  export type ParagraphCountAggregateOutputType = {
    text: number
    Score: number
    turn_number: number
    username: number
    story_id: number
    _all: number
  }


  export type ParagraphAvgAggregateInputType = {
    Score?: true
    turn_number?: true
    story_id?: true
  }

  export type ParagraphSumAggregateInputType = {
    Score?: true
    turn_number?: true
    story_id?: true
  }

  export type ParagraphMinAggregateInputType = {
    text?: true
    Score?: true
    turn_number?: true
    username?: true
    story_id?: true
  }

  export type ParagraphMaxAggregateInputType = {
    text?: true
    Score?: true
    turn_number?: true
    username?: true
    story_id?: true
  }

  export type ParagraphCountAggregateInputType = {
    text?: true
    Score?: true
    turn_number?: true
    username?: true
    story_id?: true
    _all?: true
  }

  export type ParagraphAggregateArgs = {
    /**
     * Filter which Paragraph to aggregate.
     * 
    **/
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     * 
    **/
    orderBy?: Enumerable<ParagraphOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Paragraphs
    **/
    _count?: true | ParagraphCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParagraphAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParagraphSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParagraphMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParagraphMaxAggregateInputType
  }

  export type GetParagraphAggregateType<T extends ParagraphAggregateArgs> = {
        [P in keyof T & keyof AggregateParagraph]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParagraph[P]>
      : GetScalarType<T[P], AggregateParagraph[P]>
  }




  export type ParagraphGroupByArgs = {
    where?: ParagraphWhereInput
    orderBy?: Enumerable<ParagraphOrderByWithAggregationInput>
    by: Array<ParagraphScalarFieldEnum>
    having?: ParagraphScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParagraphCountAggregateInputType | true
    _avg?: ParagraphAvgAggregateInputType
    _sum?: ParagraphSumAggregateInputType
    _min?: ParagraphMinAggregateInputType
    _max?: ParagraphMaxAggregateInputType
  }


  export type ParagraphGroupByOutputType = {
    text: string
    Score: number
    turn_number: number
    username: string
    story_id: number
    _count: ParagraphCountAggregateOutputType | null
    _avg: ParagraphAvgAggregateOutputType | null
    _sum: ParagraphSumAggregateOutputType | null
    _min: ParagraphMinAggregateOutputType | null
    _max: ParagraphMaxAggregateOutputType | null
  }

  type GetParagraphGroupByPayload<T extends ParagraphGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ParagraphGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParagraphGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParagraphGroupByOutputType[P]>
            : GetScalarType<T[P], ParagraphGroupByOutputType[P]>
        }
      >
    >


  export type ParagraphSelect = {
    text?: boolean
    Score?: boolean
    turn_number?: boolean
    username?: boolean
    story_id?: boolean
    contributed?: boolean | StoryArgs
    contributor?: boolean | PlayerArgs
  }

  export type ParagraphInclude = {
    contributed?: boolean | StoryArgs
    contributor?: boolean | PlayerArgs
  }

  export type ParagraphGetPayload<
    S extends boolean | null | undefined | ParagraphArgs,
    U = keyof S
      > = S extends true
        ? Paragraph
    : S extends undefined
    ? never
    : S extends ParagraphArgs | ParagraphFindManyArgs
    ?'include' extends U
    ? Paragraph  & {
    [P in TrueKeys<S['include']>]:
        P extends 'contributed' ? StoryGetPayload<S['include'][P]> :
        P extends 'contributor' ? PlayerGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'contributed' ? StoryGetPayload<S['select'][P]> :
        P extends 'contributor' ? PlayerGetPayload<S['select'][P]> :  P extends keyof Paragraph ? Paragraph[P] : never
  } 
    : Paragraph
  : Paragraph


  type ParagraphCountArgs = Merge<
    Omit<ParagraphFindManyArgs, 'select' | 'include'> & {
      select?: ParagraphCountAggregateInputType | true
    }
  >

  export interface ParagraphDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Paragraph that matches the filter.
     * @param {ParagraphFindUniqueArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParagraphFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParagraphFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Paragraph'> extends True ? CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>> : CheckSelect<T, Prisma__ParagraphClient<Paragraph | null >, Prisma__ParagraphClient<ParagraphGetPayload<T> | null >>

    /**
     * Find the first Paragraph that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphFindFirstArgs} args - Arguments to find a Paragraph
     * @example
     * // Get one Paragraph
     * const paragraph = await prisma.paragraph.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParagraphFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParagraphFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Paragraph'> extends True ? CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>> : CheckSelect<T, Prisma__ParagraphClient<Paragraph | null >, Prisma__ParagraphClient<ParagraphGetPayload<T> | null >>

    /**
     * Find zero or more Paragraphs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paragraphs
     * const paragraphs = await prisma.paragraph.findMany()
     * 
     * // Get first 10 Paragraphs
     * const paragraphs = await prisma.paragraph.findMany({ take: 10 })
     * 
     * // Only select the `text`
     * const paragraphWithTextOnly = await prisma.paragraph.findMany({ select: { text: true } })
     * 
    **/
    findMany<T extends ParagraphFindManyArgs>(
      args?: SelectSubset<T, ParagraphFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Paragraph>>, PrismaPromise<Array<ParagraphGetPayload<T>>>>

    /**
     * Create a Paragraph.
     * @param {ParagraphCreateArgs} args - Arguments to create a Paragraph.
     * @example
     * // Create one Paragraph
     * const Paragraph = await prisma.paragraph.create({
     *   data: {
     *     // ... data to create a Paragraph
     *   }
     * })
     * 
    **/
    create<T extends ParagraphCreateArgs>(
      args: SelectSubset<T, ParagraphCreateArgs>
    ): CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>>

    /**
     * Create many Paragraphs.
     *     @param {ParagraphCreateManyArgs} args - Arguments to create many Paragraphs.
     *     @example
     *     // Create many Paragraphs
     *     const paragraph = await prisma.paragraph.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParagraphCreateManyArgs>(
      args?: SelectSubset<T, ParagraphCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Paragraph.
     * @param {ParagraphDeleteArgs} args - Arguments to delete one Paragraph.
     * @example
     * // Delete one Paragraph
     * const Paragraph = await prisma.paragraph.delete({
     *   where: {
     *     // ... filter to delete one Paragraph
     *   }
     * })
     * 
    **/
    delete<T extends ParagraphDeleteArgs>(
      args: SelectSubset<T, ParagraphDeleteArgs>
    ): CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>>

    /**
     * Update one Paragraph.
     * @param {ParagraphUpdateArgs} args - Arguments to update one Paragraph.
     * @example
     * // Update one Paragraph
     * const paragraph = await prisma.paragraph.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParagraphUpdateArgs>(
      args: SelectSubset<T, ParagraphUpdateArgs>
    ): CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>>

    /**
     * Delete zero or more Paragraphs.
     * @param {ParagraphDeleteManyArgs} args - Arguments to filter Paragraphs to delete.
     * @example
     * // Delete a few Paragraphs
     * const { count } = await prisma.paragraph.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParagraphDeleteManyArgs>(
      args?: SelectSubset<T, ParagraphDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paragraphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paragraphs
     * const paragraph = await prisma.paragraph.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParagraphUpdateManyArgs>(
      args: SelectSubset<T, ParagraphUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Paragraph.
     * @param {ParagraphUpsertArgs} args - Arguments to update or create a Paragraph.
     * @example
     * // Update or create a Paragraph
     * const paragraph = await prisma.paragraph.upsert({
     *   create: {
     *     // ... data to create a Paragraph
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paragraph we want to update
     *   }
     * })
    **/
    upsert<T extends ParagraphUpsertArgs>(
      args: SelectSubset<T, ParagraphUpsertArgs>
    ): CheckSelect<T, Prisma__ParagraphClient<Paragraph>, Prisma__ParagraphClient<ParagraphGetPayload<T>>>

    /**
     * Count the number of Paragraphs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphCountArgs} args - Arguments to filter Paragraphs to count.
     * @example
     * // Count the number of Paragraphs
     * const count = await prisma.paragraph.count({
     *   where: {
     *     // ... the filter for the Paragraphs we want to count
     *   }
     * })
    **/
    count<T extends ParagraphCountArgs>(
      args?: Subset<T, ParagraphCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParagraphCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paragraph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParagraphAggregateArgs>(args: Subset<T, ParagraphAggregateArgs>): PrismaPromise<GetParagraphAggregateType<T>>

    /**
     * Group by Paragraph.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParagraphGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParagraphGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParagraphGroupByArgs['orderBy'] }
        : { orderBy?: ParagraphGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParagraphGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParagraphGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paragraph.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParagraphClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    contributed<T extends StoryArgs = {}>(args?: Subset<T, StoryArgs>): CheckSelect<T, Prisma__StoryClient<Story | null >, Prisma__StoryClient<StoryGetPayload<T> | null >>;

    contributor<T extends PlayerArgs = {}>(args?: Subset<T, PlayerArgs>): CheckSelect<T, Prisma__PlayerClient<Player | null >, Prisma__PlayerClient<PlayerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Paragraph findUnique
   */
  export type ParagraphFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * Throw an Error if a Paragraph can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Paragraph to fetch.
     * 
    **/
    where: ParagraphWhereUniqueInput
  }


  /**
   * Paragraph findFirst
   */
  export type ParagraphFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * Throw an Error if a Paragraph can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Paragraph to fetch.
     * 
    **/
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     * 
    **/
    orderBy?: Enumerable<ParagraphOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Paragraphs.
     * 
    **/
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Paragraphs.
     * 
    **/
    distinct?: Enumerable<ParagraphScalarFieldEnum>
  }


  /**
   * Paragraph findMany
   */
  export type ParagraphFindManyArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * Filter, which Paragraphs to fetch.
     * 
    **/
    where?: ParagraphWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Paragraphs to fetch.
     * 
    **/
    orderBy?: Enumerable<ParagraphOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Paragraphs.
     * 
    **/
    cursor?: ParagraphWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Paragraphs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Paragraphs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ParagraphScalarFieldEnum>
  }


  /**
   * Paragraph create
   */
  export type ParagraphCreateArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * The data needed to create a Paragraph.
     * 
    **/
    data: XOR<ParagraphCreateInput, ParagraphUncheckedCreateInput>
  }


  /**
   * Paragraph createMany
   */
  export type ParagraphCreateManyArgs = {
    /**
     * The data used to create many Paragraphs.
     * 
    **/
    data: Enumerable<ParagraphCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Paragraph update
   */
  export type ParagraphUpdateArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * The data needed to update a Paragraph.
     * 
    **/
    data: XOR<ParagraphUpdateInput, ParagraphUncheckedUpdateInput>
    /**
     * Choose, which Paragraph to update.
     * 
    **/
    where: ParagraphWhereUniqueInput
  }


  /**
   * Paragraph updateMany
   */
  export type ParagraphUpdateManyArgs = {
    /**
     * The data used to update Paragraphs.
     * 
    **/
    data: XOR<ParagraphUpdateManyMutationInput, ParagraphUncheckedUpdateManyInput>
    /**
     * Filter which Paragraphs to update
     * 
    **/
    where?: ParagraphWhereInput
  }


  /**
   * Paragraph upsert
   */
  export type ParagraphUpsertArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * The filter to search for the Paragraph to update in case it exists.
     * 
    **/
    where: ParagraphWhereUniqueInput
    /**
     * In case the Paragraph found by the `where` argument doesn't exist, create a new Paragraph with this data.
     * 
    **/
    create: XOR<ParagraphCreateInput, ParagraphUncheckedCreateInput>
    /**
     * In case the Paragraph was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ParagraphUpdateInput, ParagraphUncheckedUpdateInput>
  }


  /**
   * Paragraph delete
   */
  export type ParagraphDeleteArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
    /**
     * Filter which Paragraph to delete.
     * 
    **/
    where: ParagraphWhereUniqueInput
  }


  /**
   * Paragraph deleteMany
   */
  export type ParagraphDeleteManyArgs = {
    /**
     * Filter which Paragraphs to delete
     * 
    **/
    where?: ParagraphWhereInput
  }


  /**
   * Paragraph without action
   */
  export type ParagraphArgs = {
    /**
     * Select specific fields to fetch from the Paragraph
     * 
    **/
    select?: ParagraphSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParagraphInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PlayerScalarFieldEnum: {
    username: 'username',
    password_hash: 'password_hash',
    email: 'email',
    image_ID: 'image_ID',
    mooncoins: 'mooncoins',
    stars: 'stars'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const PetitionScalarFieldEnum: {
    username: 'username',
    petition_name: 'petition_name'
  };

  export type PetitionScalarFieldEnum = (typeof PetitionScalarFieldEnum)[keyof typeof PetitionScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    username: 'username',
    friendname: 'friendname'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const StoryScalarFieldEnum: {
    story_id: 'story_id',
    date: 'date'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const ParticipantScalarFieldEnum: {
    username: 'username',
    story_id: 'story_id',
    voted: 'voted',
    creator: 'creator'
  };

  export type ParticipantScalarFieldEnum = (typeof ParticipantScalarFieldEnum)[keyof typeof ParticipantScalarFieldEnum]


  export const Tale_modeScalarFieldEnum: {
    story_id: 'story_id',
    max_turns: 'max_turns',
    max_paragraph_chars: 'max_paragraph_chars',
    privacy: 'privacy',
    finished: 'finished',
    scored: 'scored',
    title: 'title',
    turn: 'turn'
  };

  export type Tale_modeScalarFieldEnum = (typeof Tale_modeScalarFieldEnum)[keyof typeof Tale_modeScalarFieldEnum]


  export const Quick_matchScalarFieldEnum: {
    story_id: 'story_id',
    mode: 'mode'
  };

  export type Quick_matchScalarFieldEnum = (typeof Quick_matchScalarFieldEnum)[keyof typeof Quick_matchScalarFieldEnum]


  export const ParagraphScalarFieldEnum: {
    text: 'text',
    Score: 'Score',
    turn_number: 'turn_number',
    username: 'username',
    story_id: 'story_id'
  };

  export type ParagraphScalarFieldEnum = (typeof ParagraphScalarFieldEnum)[keyof typeof ParagraphScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type PlayerWhereInput = {
    AND?: Enumerable<PlayerWhereInput>
    OR?: Enumerable<PlayerWhereInput>
    NOT?: Enumerable<PlayerWhereInput>
    username?: StringFilter | string
    password_hash?: StringFilter | string
    email?: StringFilter | string
    image_ID?: IntFilter | number
    mooncoins?: IntFilter | number
    stars?: IntFilter | number
    friend?: FriendshipListRelationFilter
    himself?: FriendshipListRelationFilter
    contributor?: ParagraphListRelationFilter
    participant?: ParticipantListRelationFilter
    receiver?: PetitionListRelationFilter
    questioner?: PetitionListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    username?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
    friend?: FriendshipOrderByRelationAggregateInput
    himself?: FriendshipOrderByRelationAggregateInput
    contributor?: ParagraphOrderByRelationAggregateInput
    participant?: ParticipantOrderByRelationAggregateInput
    receiver?: PetitionOrderByRelationAggregateInput
    questioner?: PetitionOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = {
    username?: string
    email?: string
  }

  export type PlayerOrderByWithAggregationInput = {
    username?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    password_hash?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    image_ID?: IntWithAggregatesFilter | number
    mooncoins?: IntWithAggregatesFilter | number
    stars?: IntWithAggregatesFilter | number
  }

  export type PetitionWhereInput = {
    AND?: Enumerable<PetitionWhereInput>
    OR?: Enumerable<PetitionWhereInput>
    NOT?: Enumerable<PetitionWhereInput>
    username?: StringFilter | string
    petition_name?: StringFilter | string
    receiver?: XOR<PlayerRelationFilter, PlayerWhereInput>
    questioner?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type PetitionOrderByWithRelationInput = {
    username?: SortOrder
    petition_name?: SortOrder
    receiver?: PlayerOrderByWithRelationInput
    questioner?: PlayerOrderByWithRelationInput
  }

  export type PetitionWhereUniqueInput = {
    username_petition_name?: PetitionUsernamePetition_nameCompoundUniqueInput
  }

  export type PetitionOrderByWithAggregationInput = {
    username?: SortOrder
    petition_name?: SortOrder
    _count?: PetitionCountOrderByAggregateInput
    _max?: PetitionMaxOrderByAggregateInput
    _min?: PetitionMinOrderByAggregateInput
  }

  export type PetitionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PetitionScalarWhereWithAggregatesInput>
    OR?: Enumerable<PetitionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PetitionScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    petition_name?: StringWithAggregatesFilter | string
  }

  export type FriendshipWhereInput = {
    AND?: Enumerable<FriendshipWhereInput>
    OR?: Enumerable<FriendshipWhereInput>
    NOT?: Enumerable<FriendshipWhereInput>
    username?: StringFilter | string
    friendname?: StringFilter | string
    friend?: XOR<PlayerRelationFilter, PlayerWhereInput>
    himself?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    username?: SortOrder
    friendname?: SortOrder
    friend?: PlayerOrderByWithRelationInput
    himself?: PlayerOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = {
    username_friendname?: FriendshipUsernameFriendnameCompoundUniqueInput
  }

  export type FriendshipOrderByWithAggregationInput = {
    username?: SortOrder
    friendname?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    friendname?: StringWithAggregatesFilter | string
  }

  export type StoryWhereInput = {
    AND?: Enumerable<StoryWhereInput>
    OR?: Enumerable<StoryWhereInput>
    NOT?: Enumerable<StoryWhereInput>
    story_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    contributed?: ParagraphListRelationFilter
    story?: ParticipantListRelationFilter
    quick_match?: XOR<Quick_matchRelationFilter, Quick_matchWhereInput> | null
    tale?: XOR<Tale_modeRelationFilter, Tale_modeWhereInput> | null
  }

  export type StoryOrderByWithRelationInput = {
    story_id?: SortOrder
    date?: SortOrder
    contributed?: ParagraphOrderByRelationAggregateInput
    story?: ParticipantOrderByRelationAggregateInput
    quick_match?: Quick_matchOrderByWithRelationInput
    tale?: Tale_modeOrderByWithRelationInput
  }

  export type StoryWhereUniqueInput = {
    story_id?: number
  }

  export type StoryOrderByWithAggregationInput = {
    story_id?: SortOrder
    date?: SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<StoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StoryScalarWhereWithAggregatesInput>
    story_id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ParticipantWhereInput = {
    AND?: Enumerable<ParticipantWhereInput>
    OR?: Enumerable<ParticipantWhereInput>
    NOT?: Enumerable<ParticipantWhereInput>
    username?: StringFilter | string
    story_id?: IntFilter | number
    voted?: StringFilter | string
    creator?: BoolFilter | boolean
    story?: XOR<StoryRelationFilter, StoryWhereInput>
    participant?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type ParticipantOrderByWithRelationInput = {
    username?: SortOrder
    story_id?: SortOrder
    voted?: SortOrder
    creator?: SortOrder
    story?: StoryOrderByWithRelationInput
    participant?: PlayerOrderByWithRelationInput
  }

  export type ParticipantWhereUniqueInput = {
    username_story_id?: ParticipantUsernameStory_idCompoundUniqueInput
  }

  export type ParticipantOrderByWithAggregationInput = {
    username?: SortOrder
    story_id?: SortOrder
    voted?: SortOrder
    creator?: SortOrder
    _count?: ParticipantCountOrderByAggregateInput
    _avg?: ParticipantAvgOrderByAggregateInput
    _max?: ParticipantMaxOrderByAggregateInput
    _min?: ParticipantMinOrderByAggregateInput
    _sum?: ParticipantSumOrderByAggregateInput
  }

  export type ParticipantScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    story_id?: IntWithAggregatesFilter | number
    voted?: StringWithAggregatesFilter | string
    creator?: BoolWithAggregatesFilter | boolean
  }

  export type Tale_modeWhereInput = {
    AND?: Enumerable<Tale_modeWhereInput>
    OR?: Enumerable<Tale_modeWhereInput>
    NOT?: Enumerable<Tale_modeWhereInput>
    story_id?: IntFilter | number
    max_turns?: IntFilter | number
    max_paragraph_chars?: IntFilter | number
    privacy?: BoolFilter | boolean
    finished?: BoolFilter | boolean
    scored?: BoolFilter | boolean
    title?: StringFilter | string
    turn?: IntFilter | number
    tale?: XOR<StoryRelationFilter, StoryWhereInput>
  }

  export type Tale_modeOrderByWithRelationInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    privacy?: SortOrder
    finished?: SortOrder
    scored?: SortOrder
    title?: SortOrder
    turn?: SortOrder
    tale?: StoryOrderByWithRelationInput
  }

  export type Tale_modeWhereUniqueInput = {
    story_id?: number
  }

  export type Tale_modeOrderByWithAggregationInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    privacy?: SortOrder
    finished?: SortOrder
    scored?: SortOrder
    title?: SortOrder
    turn?: SortOrder
    _count?: Tale_modeCountOrderByAggregateInput
    _avg?: Tale_modeAvgOrderByAggregateInput
    _max?: Tale_modeMaxOrderByAggregateInput
    _min?: Tale_modeMinOrderByAggregateInput
    _sum?: Tale_modeSumOrderByAggregateInput
  }

  export type Tale_modeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Tale_modeScalarWhereWithAggregatesInput>
    OR?: Enumerable<Tale_modeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Tale_modeScalarWhereWithAggregatesInput>
    story_id?: IntWithAggregatesFilter | number
    max_turns?: IntWithAggregatesFilter | number
    max_paragraph_chars?: IntWithAggregatesFilter | number
    privacy?: BoolWithAggregatesFilter | boolean
    finished?: BoolWithAggregatesFilter | boolean
    scored?: BoolWithAggregatesFilter | boolean
    title?: StringWithAggregatesFilter | string
    turn?: IntWithAggregatesFilter | number
  }

  export type Quick_matchWhereInput = {
    AND?: Enumerable<Quick_matchWhereInput>
    OR?: Enumerable<Quick_matchWhereInput>
    NOT?: Enumerable<Quick_matchWhereInput>
    story_id?: IntFilter | number
    mode?: IntFilter | number
    quick_match?: XOR<StoryRelationFilter, StoryWhereInput>
  }

  export type Quick_matchOrderByWithRelationInput = {
    story_id?: SortOrder
    mode?: SortOrder
    quick_match?: StoryOrderByWithRelationInput
  }

  export type Quick_matchWhereUniqueInput = {
    story_id?: number
  }

  export type Quick_matchOrderByWithAggregationInput = {
    story_id?: SortOrder
    mode?: SortOrder
    _count?: Quick_matchCountOrderByAggregateInput
    _avg?: Quick_matchAvgOrderByAggregateInput
    _max?: Quick_matchMaxOrderByAggregateInput
    _min?: Quick_matchMinOrderByAggregateInput
    _sum?: Quick_matchSumOrderByAggregateInput
  }

  export type Quick_matchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Quick_matchScalarWhereWithAggregatesInput>
    OR?: Enumerable<Quick_matchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Quick_matchScalarWhereWithAggregatesInput>
    story_id?: IntWithAggregatesFilter | number
    mode?: IntWithAggregatesFilter | number
  }

  export type ParagraphWhereInput = {
    AND?: Enumerable<ParagraphWhereInput>
    OR?: Enumerable<ParagraphWhereInput>
    NOT?: Enumerable<ParagraphWhereInput>
    text?: StringFilter | string
    Score?: IntFilter | number
    turn_number?: IntFilter | number
    username?: StringFilter | string
    story_id?: IntFilter | number
    contributed?: XOR<StoryRelationFilter, StoryWhereInput>
    contributor?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type ParagraphOrderByWithRelationInput = {
    text?: SortOrder
    Score?: SortOrder
    turn_number?: SortOrder
    username?: SortOrder
    story_id?: SortOrder
    contributed?: StoryOrderByWithRelationInput
    contributor?: PlayerOrderByWithRelationInput
  }

  export type ParagraphWhereUniqueInput = {
    turn_number_username_story_id?: ParagraphTurn_numberUsernameStory_idCompoundUniqueInput
  }

  export type ParagraphOrderByWithAggregationInput = {
    text?: SortOrder
    Score?: SortOrder
    turn_number?: SortOrder
    username?: SortOrder
    story_id?: SortOrder
    _count?: ParagraphCountOrderByAggregateInput
    _avg?: ParagraphAvgOrderByAggregateInput
    _max?: ParagraphMaxOrderByAggregateInput
    _min?: ParagraphMinOrderByAggregateInput
    _sum?: ParagraphSumOrderByAggregateInput
  }

  export type ParagraphScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParagraphScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParagraphScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParagraphScalarWhereWithAggregatesInput>
    text?: StringWithAggregatesFilter | string
    Score?: IntWithAggregatesFilter | number
    turn_number?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    story_id?: IntWithAggregatesFilter | number
  }

  export type PlayerCreateInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    himself?: FriendshipUpdateManyWithoutHimselfInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type PlayerCreateManyInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
  }

  export type PlayerUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
  }

  export type PetitionCreateInput = {
    receiver: PlayerCreateNestedOneWithoutReceiverInput
    questioner: PlayerCreateNestedOneWithoutQuestionerInput
  }

  export type PetitionUncheckedCreateInput = {
    username: string
    petition_name: string
  }

  export type PetitionUpdateInput = {
    receiver?: PlayerUpdateOneRequiredWithoutReceiverInput
    questioner?: PlayerUpdateOneRequiredWithoutQuestionerInput
  }

  export type PetitionUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    petition_name?: StringFieldUpdateOperationsInput | string
  }

  export type PetitionCreateManyInput = {
    username: string
    petition_name: string
  }

  export type PetitionUpdateManyMutationInput = {

  }

  export type PetitionUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    petition_name?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateInput = {
    friend: PlayerCreateNestedOneWithoutFriendInput
    himself: PlayerCreateNestedOneWithoutHimselfInput
  }

  export type FriendshipUncheckedCreateInput = {
    username: string
    friendname: string
  }

  export type FriendshipUpdateInput = {
    friend?: PlayerUpdateOneRequiredWithoutFriendInput
    himself?: PlayerUpdateOneRequiredWithoutHimselfInput
  }

  export type FriendshipUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    friendname?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipCreateManyInput = {
    username: string
    friendname: string
  }

  export type FriendshipUpdateManyMutationInput = {

  }

  export type FriendshipUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    friendname?: StringFieldUpdateOperationsInput | string
  }

  export type StoryCreateInput = {
    date?: Date | string
    contributed?: ParagraphCreateNestedManyWithoutContributedInput
    story?: ParticipantCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeCreateNestedOneWithoutTaleInput
  }

  export type StoryUncheckedCreateInput = {
    story_id?: number
    date?: Date | string
    contributed?: ParagraphUncheckedCreateNestedManyWithoutContributedInput
    story?: ParticipantUncheckedCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedCreateNestedOneWithoutTaleInput
  }

  export type StoryUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUpdateManyWithoutContributedInput
    story?: ParticipantUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUpdateOneWithoutTaleInput
  }

  export type StoryUncheckedUpdateInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUncheckedUpdateManyWithoutContributedInput
    story?: ParticipantUncheckedUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedUpdateOneWithoutTaleInput
  }

  export type StoryCreateManyInput = {
    story_id?: number
    date?: Date | string
  }

  export type StoryUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryUncheckedUpdateManyInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantCreateInput = {
    voted: string
    creator: boolean
    story: StoryCreateNestedOneWithoutStoryInput
    participant: PlayerCreateNestedOneWithoutParticipantInput
  }

  export type ParticipantUncheckedCreateInput = {
    username: string
    story_id: number
    voted: string
    creator: boolean
  }

  export type ParticipantUpdateInput = {
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
    story?: StoryUpdateOneRequiredWithoutStoryInput
    participant?: PlayerUpdateOneRequiredWithoutParticipantInput
  }

  export type ParticipantUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    story_id?: IntFieldUpdateOperationsInput | number
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantCreateManyInput = {
    username: string
    story_id: number
    voted: string
    creator: boolean
  }

  export type ParticipantUpdateManyMutationInput = {
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ParticipantUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    story_id?: IntFieldUpdateOperationsInput | number
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Tale_modeCreateInput = {
    max_turns?: number
    max_paragraph_chars?: number
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title: string
    turn?: number
    tale: StoryCreateNestedOneWithoutTaleInput
  }

  export type Tale_modeUncheckedCreateInput = {
    story_id: number
    max_turns?: number
    max_paragraph_chars?: number
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title: string
    turn?: number
  }

  export type Tale_modeUpdateInput = {
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
    tale?: StoryUpdateOneRequiredWithoutTaleInput
  }

  export type Tale_modeUncheckedUpdateInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
  }

  export type Tale_modeCreateManyInput = {
    story_id: number
    max_turns?: number
    max_paragraph_chars?: number
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title: string
    turn?: number
  }

  export type Tale_modeUpdateManyMutationInput = {
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
  }

  export type Tale_modeUncheckedUpdateManyInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
  }

  export type Quick_matchCreateInput = {
    mode: number
    quick_match: StoryCreateNestedOneWithoutQuick_matchInput
  }

  export type Quick_matchUncheckedCreateInput = {
    story_id: number
    mode: number
  }

  export type Quick_matchUpdateInput = {
    mode?: IntFieldUpdateOperationsInput | number
    quick_match?: StoryUpdateOneRequiredWithoutQuick_matchInput
  }

  export type Quick_matchUncheckedUpdateInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    mode?: IntFieldUpdateOperationsInput | number
  }

  export type Quick_matchCreateManyInput = {
    story_id: number
    mode: number
  }

  export type Quick_matchUpdateManyMutationInput = {
    mode?: IntFieldUpdateOperationsInput | number
  }

  export type Quick_matchUncheckedUpdateManyInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    mode?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphCreateInput = {
    text: string
    Score?: number
    turn_number?: number
    contributed: StoryCreateNestedOneWithoutContributedInput
    contributor: PlayerCreateNestedOneWithoutContributorInput
  }

  export type ParagraphUncheckedCreateInput = {
    text: string
    Score?: number
    turn_number?: number
    username: string
    story_id: number
  }

  export type ParagraphUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    contributed?: StoryUpdateOneRequiredWithoutContributedInput
    contributor?: PlayerUpdateOneRequiredWithoutContributorInput
  }

  export type ParagraphUncheckedUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    story_id?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphCreateManyInput = {
    text: string
    Score?: number
    turn_number?: number
    username: string
    story_id: number
  }

  export type ParagraphUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
  }

  export type ParagraphUncheckedUpdateManyInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    story_id?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type ParagraphListRelationFilter = {
    every?: ParagraphWhereInput
    some?: ParagraphWhereInput
    none?: ParagraphWhereInput
  }

  export type ParticipantListRelationFilter = {
    every?: ParticipantWhereInput
    some?: ParticipantWhereInput
    none?: ParticipantWhereInput
  }

  export type PetitionListRelationFilter = {
    every?: PetitionWhereInput
    some?: PetitionWhereInput
    none?: PetitionWhereInput
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParagraphOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    username?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    username?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    username?: SortOrder
    password_hash?: SortOrder
    email?: SortOrder
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    image_ID?: SortOrder
    mooncoins?: SortOrder
    stars?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PetitionUsernamePetition_nameCompoundUniqueInput = {
    username: string
    petition_name: string
  }

  export type PetitionCountOrderByAggregateInput = {
    username?: SortOrder
    petition_name?: SortOrder
  }

  export type PetitionMaxOrderByAggregateInput = {
    username?: SortOrder
    petition_name?: SortOrder
  }

  export type PetitionMinOrderByAggregateInput = {
    username?: SortOrder
    petition_name?: SortOrder
  }

  export type FriendshipUsernameFriendnameCompoundUniqueInput = {
    username: string
    friendname: string
  }

  export type FriendshipCountOrderByAggregateInput = {
    username?: SortOrder
    friendname?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    username?: SortOrder
    friendname?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    username?: SortOrder
    friendname?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Quick_matchRelationFilter = {
    is?: Quick_matchWhereInput | null
    isNot?: Quick_matchWhereInput | null
  }

  export type Tale_modeRelationFilter = {
    is?: Tale_modeWhereInput | null
    isNot?: Tale_modeWhereInput | null
  }

  export type StoryCountOrderByAggregateInput = {
    story_id?: SortOrder
    date?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    story_id?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    story_id?: SortOrder
    date?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    story_id?: SortOrder
    date?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    story_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StoryRelationFilter = {
    is?: StoryWhereInput
    isNot?: StoryWhereInput
  }

  export type ParticipantUsernameStory_idCompoundUniqueInput = {
    username: string
    story_id: number
  }

  export type ParticipantCountOrderByAggregateInput = {
    username?: SortOrder
    story_id?: SortOrder
    voted?: SortOrder
    creator?: SortOrder
  }

  export type ParticipantAvgOrderByAggregateInput = {
    story_id?: SortOrder
  }

  export type ParticipantMaxOrderByAggregateInput = {
    username?: SortOrder
    story_id?: SortOrder
    voted?: SortOrder
    creator?: SortOrder
  }

  export type ParticipantMinOrderByAggregateInput = {
    username?: SortOrder
    story_id?: SortOrder
    voted?: SortOrder
    creator?: SortOrder
  }

  export type ParticipantSumOrderByAggregateInput = {
    story_id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Tale_modeCountOrderByAggregateInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    privacy?: SortOrder
    finished?: SortOrder
    scored?: SortOrder
    title?: SortOrder
    turn?: SortOrder
  }

  export type Tale_modeAvgOrderByAggregateInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    turn?: SortOrder
  }

  export type Tale_modeMaxOrderByAggregateInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    privacy?: SortOrder
    finished?: SortOrder
    scored?: SortOrder
    title?: SortOrder
    turn?: SortOrder
  }

  export type Tale_modeMinOrderByAggregateInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    privacy?: SortOrder
    finished?: SortOrder
    scored?: SortOrder
    title?: SortOrder
    turn?: SortOrder
  }

  export type Tale_modeSumOrderByAggregateInput = {
    story_id?: SortOrder
    max_turns?: SortOrder
    max_paragraph_chars?: SortOrder
    turn?: SortOrder
  }

  export type Quick_matchCountOrderByAggregateInput = {
    story_id?: SortOrder
    mode?: SortOrder
  }

  export type Quick_matchAvgOrderByAggregateInput = {
    story_id?: SortOrder
    mode?: SortOrder
  }

  export type Quick_matchMaxOrderByAggregateInput = {
    story_id?: SortOrder
    mode?: SortOrder
  }

  export type Quick_matchMinOrderByAggregateInput = {
    story_id?: SortOrder
    mode?: SortOrder
  }

  export type Quick_matchSumOrderByAggregateInput = {
    story_id?: SortOrder
    mode?: SortOrder
  }

  export type ParagraphTurn_numberUsernameStory_idCompoundUniqueInput = {
    turn_number: number
    username: string
    story_id: number
  }

  export type ParagraphCountOrderByAggregateInput = {
    text?: SortOrder
    Score?: SortOrder
    turn_number?: SortOrder
    username?: SortOrder
    story_id?: SortOrder
  }

  export type ParagraphAvgOrderByAggregateInput = {
    Score?: SortOrder
    turn_number?: SortOrder
    story_id?: SortOrder
  }

  export type ParagraphMaxOrderByAggregateInput = {
    text?: SortOrder
    Score?: SortOrder
    turn_number?: SortOrder
    username?: SortOrder
    story_id?: SortOrder
  }

  export type ParagraphMinOrderByAggregateInput = {
    text?: SortOrder
    Score?: SortOrder
    turn_number?: SortOrder
    username?: SortOrder
    story_id?: SortOrder
  }

  export type ParagraphSumOrderByAggregateInput = {
    Score?: SortOrder
    turn_number?: SortOrder
    story_id?: SortOrder
  }

  export type FriendshipCreateNestedManyWithoutFriendInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutFriendInput>, Enumerable<FriendshipUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutFriendInput>
    createMany?: FriendshipCreateManyFriendInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutHimselfInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutHimselfInput>, Enumerable<FriendshipUncheckedCreateWithoutHimselfInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutHimselfInput>
    createMany?: FriendshipCreateManyHimselfInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type ParagraphCreateNestedManyWithoutContributorInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributorInput>, Enumerable<ParagraphUncheckedCreateWithoutContributorInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributorInput>
    createMany?: ParagraphCreateManyContributorInputEnvelope
    connect?: Enumerable<ParagraphWhereUniqueInput>
  }

  export type ParticipantCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutParticipantInput>, Enumerable<ParticipantUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutParticipantInput>
    createMany?: ParticipantCreateManyParticipantInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type PetitionCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutReceiverInput>, Enumerable<PetitionUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutReceiverInput>
    createMany?: PetitionCreateManyReceiverInputEnvelope
    connect?: Enumerable<PetitionWhereUniqueInput>
  }

  export type PetitionCreateNestedManyWithoutQuestionerInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutQuestionerInput>, Enumerable<PetitionUncheckedCreateWithoutQuestionerInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutQuestionerInput>
    createMany?: PetitionCreateManyQuestionerInputEnvelope
    connect?: Enumerable<PetitionWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutFriendInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutFriendInput>, Enumerable<FriendshipUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutFriendInput>
    createMany?: FriendshipCreateManyFriendInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutHimselfInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutHimselfInput>, Enumerable<FriendshipUncheckedCreateWithoutHimselfInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutHimselfInput>
    createMany?: FriendshipCreateManyHimselfInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type ParagraphUncheckedCreateNestedManyWithoutContributorInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributorInput>, Enumerable<ParagraphUncheckedCreateWithoutContributorInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributorInput>
    createMany?: ParagraphCreateManyContributorInputEnvelope
    connect?: Enumerable<ParagraphWhereUniqueInput>
  }

  export type ParticipantUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutParticipantInput>, Enumerable<ParticipantUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutParticipantInput>
    createMany?: ParticipantCreateManyParticipantInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type PetitionUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutReceiverInput>, Enumerable<PetitionUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutReceiverInput>
    createMany?: PetitionCreateManyReceiverInputEnvelope
    connect?: Enumerable<PetitionWhereUniqueInput>
  }

  export type PetitionUncheckedCreateNestedManyWithoutQuestionerInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutQuestionerInput>, Enumerable<PetitionUncheckedCreateWithoutQuestionerInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutQuestionerInput>
    createMany?: PetitionCreateManyQuestionerInputEnvelope
    connect?: Enumerable<PetitionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FriendshipUpdateManyWithoutFriendInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutFriendInput>, Enumerable<FriendshipUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutFriendInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutFriendInput>
    createMany?: FriendshipCreateManyFriendInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutFriendInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutFriendInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutHimselfInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutHimselfInput>, Enumerable<FriendshipUncheckedCreateWithoutHimselfInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutHimselfInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutHimselfInput>
    createMany?: FriendshipCreateManyHimselfInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutHimselfInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutHimselfInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type ParagraphUpdateManyWithoutContributorInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributorInput>, Enumerable<ParagraphUncheckedCreateWithoutContributorInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributorInput>
    upsert?: Enumerable<ParagraphUpsertWithWhereUniqueWithoutContributorInput>
    createMany?: ParagraphCreateManyContributorInputEnvelope
    set?: Enumerable<ParagraphWhereUniqueInput>
    disconnect?: Enumerable<ParagraphWhereUniqueInput>
    delete?: Enumerable<ParagraphWhereUniqueInput>
    connect?: Enumerable<ParagraphWhereUniqueInput>
    update?: Enumerable<ParagraphUpdateWithWhereUniqueWithoutContributorInput>
    updateMany?: Enumerable<ParagraphUpdateManyWithWhereWithoutContributorInput>
    deleteMany?: Enumerable<ParagraphScalarWhereInput>
  }

  export type ParticipantUpdateManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutParticipantInput>, Enumerable<ParticipantUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: ParticipantCreateManyParticipantInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type PetitionUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutReceiverInput>, Enumerable<PetitionUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PetitionUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PetitionCreateManyReceiverInputEnvelope
    set?: Enumerable<PetitionWhereUniqueInput>
    disconnect?: Enumerable<PetitionWhereUniqueInput>
    delete?: Enumerable<PetitionWhereUniqueInput>
    connect?: Enumerable<PetitionWhereUniqueInput>
    update?: Enumerable<PetitionUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PetitionUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PetitionScalarWhereInput>
  }

  export type PetitionUpdateManyWithoutQuestionerInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutQuestionerInput>, Enumerable<PetitionUncheckedCreateWithoutQuestionerInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutQuestionerInput>
    upsert?: Enumerable<PetitionUpsertWithWhereUniqueWithoutQuestionerInput>
    createMany?: PetitionCreateManyQuestionerInputEnvelope
    set?: Enumerable<PetitionWhereUniqueInput>
    disconnect?: Enumerable<PetitionWhereUniqueInput>
    delete?: Enumerable<PetitionWhereUniqueInput>
    connect?: Enumerable<PetitionWhereUniqueInput>
    update?: Enumerable<PetitionUpdateWithWhereUniqueWithoutQuestionerInput>
    updateMany?: Enumerable<PetitionUpdateManyWithWhereWithoutQuestionerInput>
    deleteMany?: Enumerable<PetitionScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutFriendInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutFriendInput>, Enumerable<FriendshipUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutFriendInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutFriendInput>
    createMany?: FriendshipCreateManyFriendInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutFriendInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutFriendInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutHimselfInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutHimselfInput>, Enumerable<FriendshipUncheckedCreateWithoutHimselfInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutHimselfInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutHimselfInput>
    createMany?: FriendshipCreateManyHimselfInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutHimselfInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutHimselfInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type ParagraphUncheckedUpdateManyWithoutContributorInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributorInput>, Enumerable<ParagraphUncheckedCreateWithoutContributorInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributorInput>
    upsert?: Enumerable<ParagraphUpsertWithWhereUniqueWithoutContributorInput>
    createMany?: ParagraphCreateManyContributorInputEnvelope
    set?: Enumerable<ParagraphWhereUniqueInput>
    disconnect?: Enumerable<ParagraphWhereUniqueInput>
    delete?: Enumerable<ParagraphWhereUniqueInput>
    connect?: Enumerable<ParagraphWhereUniqueInput>
    update?: Enumerable<ParagraphUpdateWithWhereUniqueWithoutContributorInput>
    updateMany?: Enumerable<ParagraphUpdateManyWithWhereWithoutContributorInput>
    deleteMany?: Enumerable<ParagraphScalarWhereInput>
  }

  export type ParticipantUncheckedUpdateManyWithoutParticipantInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutParticipantInput>, Enumerable<ParticipantUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: ParticipantCreateManyParticipantInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type PetitionUncheckedUpdateManyWithoutReceiverInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutReceiverInput>, Enumerable<PetitionUncheckedCreateWithoutReceiverInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutReceiverInput>
    upsert?: Enumerable<PetitionUpsertWithWhereUniqueWithoutReceiverInput>
    createMany?: PetitionCreateManyReceiverInputEnvelope
    set?: Enumerable<PetitionWhereUniqueInput>
    disconnect?: Enumerable<PetitionWhereUniqueInput>
    delete?: Enumerable<PetitionWhereUniqueInput>
    connect?: Enumerable<PetitionWhereUniqueInput>
    update?: Enumerable<PetitionUpdateWithWhereUniqueWithoutReceiverInput>
    updateMany?: Enumerable<PetitionUpdateManyWithWhereWithoutReceiverInput>
    deleteMany?: Enumerable<PetitionScalarWhereInput>
  }

  export type PetitionUncheckedUpdateManyWithoutQuestionerInput = {
    create?: XOR<Enumerable<PetitionCreateWithoutQuestionerInput>, Enumerable<PetitionUncheckedCreateWithoutQuestionerInput>>
    connectOrCreate?: Enumerable<PetitionCreateOrConnectWithoutQuestionerInput>
    upsert?: Enumerable<PetitionUpsertWithWhereUniqueWithoutQuestionerInput>
    createMany?: PetitionCreateManyQuestionerInputEnvelope
    set?: Enumerable<PetitionWhereUniqueInput>
    disconnect?: Enumerable<PetitionWhereUniqueInput>
    delete?: Enumerable<PetitionWhereUniqueInput>
    connect?: Enumerable<PetitionWhereUniqueInput>
    update?: Enumerable<PetitionUpdateWithWhereUniqueWithoutQuestionerInput>
    updateMany?: Enumerable<PetitionUpdateManyWithWhereWithoutQuestionerInput>
    deleteMany?: Enumerable<PetitionScalarWhereInput>
  }

  export type PlayerCreateNestedOneWithoutReceiverInput = {
    create?: XOR<PlayerCreateWithoutReceiverInput, PlayerUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutReceiverInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutQuestionerInput = {
    create?: XOR<PlayerCreateWithoutQuestionerInput, PlayerUncheckedCreateWithoutQuestionerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutQuestionerInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutReceiverInput = {
    create?: XOR<PlayerCreateWithoutReceiverInput, PlayerUncheckedCreateWithoutReceiverInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutReceiverInput
    upsert?: PlayerUpsertWithoutReceiverInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutReceiverInput, PlayerUncheckedUpdateWithoutReceiverInput>
  }

  export type PlayerUpdateOneRequiredWithoutQuestionerInput = {
    create?: XOR<PlayerCreateWithoutQuestionerInput, PlayerUncheckedCreateWithoutQuestionerInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutQuestionerInput
    upsert?: PlayerUpsertWithoutQuestionerInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutQuestionerInput, PlayerUncheckedUpdateWithoutQuestionerInput>
  }

  export type PlayerCreateNestedOneWithoutFriendInput = {
    create?: XOR<PlayerCreateWithoutFriendInput, PlayerUncheckedCreateWithoutFriendInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutFriendInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutHimselfInput = {
    create?: XOR<PlayerCreateWithoutHimselfInput, PlayerUncheckedCreateWithoutHimselfInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutHimselfInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutFriendInput = {
    create?: XOR<PlayerCreateWithoutFriendInput, PlayerUncheckedCreateWithoutFriendInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutFriendInput
    upsert?: PlayerUpsertWithoutFriendInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutFriendInput, PlayerUncheckedUpdateWithoutFriendInput>
  }

  export type PlayerUpdateOneRequiredWithoutHimselfInput = {
    create?: XOR<PlayerCreateWithoutHimselfInput, PlayerUncheckedCreateWithoutHimselfInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutHimselfInput
    upsert?: PlayerUpsertWithoutHimselfInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutHimselfInput, PlayerUncheckedUpdateWithoutHimselfInput>
  }

  export type ParagraphCreateNestedManyWithoutContributedInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributedInput>, Enumerable<ParagraphUncheckedCreateWithoutContributedInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributedInput>
    createMany?: ParagraphCreateManyContributedInputEnvelope
    connect?: Enumerable<ParagraphWhereUniqueInput>
  }

  export type ParticipantCreateNestedManyWithoutStoryInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutStoryInput>, Enumerable<ParticipantUncheckedCreateWithoutStoryInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutStoryInput>
    createMany?: ParticipantCreateManyStoryInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type Quick_matchCreateNestedOneWithoutQuick_matchInput = {
    create?: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: Quick_matchCreateOrConnectWithoutQuick_matchInput
    connect?: Quick_matchWhereUniqueInput
  }

  export type Tale_modeCreateNestedOneWithoutTaleInput = {
    create?: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
    connectOrCreate?: Tale_modeCreateOrConnectWithoutTaleInput
    connect?: Tale_modeWhereUniqueInput
  }

  export type ParagraphUncheckedCreateNestedManyWithoutContributedInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributedInput>, Enumerable<ParagraphUncheckedCreateWithoutContributedInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributedInput>
    createMany?: ParagraphCreateManyContributedInputEnvelope
    connect?: Enumerable<ParagraphWhereUniqueInput>
  }

  export type ParticipantUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutStoryInput>, Enumerable<ParticipantUncheckedCreateWithoutStoryInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutStoryInput>
    createMany?: ParticipantCreateManyStoryInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type Quick_matchUncheckedCreateNestedOneWithoutQuick_matchInput = {
    create?: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: Quick_matchCreateOrConnectWithoutQuick_matchInput
    connect?: Quick_matchWhereUniqueInput
  }

  export type Tale_modeUncheckedCreateNestedOneWithoutTaleInput = {
    create?: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
    connectOrCreate?: Tale_modeCreateOrConnectWithoutTaleInput
    connect?: Tale_modeWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ParagraphUpdateManyWithoutContributedInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributedInput>, Enumerable<ParagraphUncheckedCreateWithoutContributedInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributedInput>
    upsert?: Enumerable<ParagraphUpsertWithWhereUniqueWithoutContributedInput>
    createMany?: ParagraphCreateManyContributedInputEnvelope
    set?: Enumerable<ParagraphWhereUniqueInput>
    disconnect?: Enumerable<ParagraphWhereUniqueInput>
    delete?: Enumerable<ParagraphWhereUniqueInput>
    connect?: Enumerable<ParagraphWhereUniqueInput>
    update?: Enumerable<ParagraphUpdateWithWhereUniqueWithoutContributedInput>
    updateMany?: Enumerable<ParagraphUpdateManyWithWhereWithoutContributedInput>
    deleteMany?: Enumerable<ParagraphScalarWhereInput>
  }

  export type ParticipantUpdateManyWithoutStoryInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutStoryInput>, Enumerable<ParticipantUncheckedCreateWithoutStoryInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutStoryInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutStoryInput>
    createMany?: ParticipantCreateManyStoryInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutStoryInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutStoryInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type Quick_matchUpdateOneWithoutQuick_matchInput = {
    create?: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: Quick_matchCreateOrConnectWithoutQuick_matchInput
    upsert?: Quick_matchUpsertWithoutQuick_matchInput
    disconnect?: boolean
    delete?: boolean
    connect?: Quick_matchWhereUniqueInput
    update?: XOR<Quick_matchUpdateWithoutQuick_matchInput, Quick_matchUncheckedUpdateWithoutQuick_matchInput>
  }

  export type Tale_modeUpdateOneWithoutTaleInput = {
    create?: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
    connectOrCreate?: Tale_modeCreateOrConnectWithoutTaleInput
    upsert?: Tale_modeUpsertWithoutTaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: Tale_modeWhereUniqueInput
    update?: XOR<Tale_modeUpdateWithoutTaleInput, Tale_modeUncheckedUpdateWithoutTaleInput>
  }

  export type ParagraphUncheckedUpdateManyWithoutContributedInput = {
    create?: XOR<Enumerable<ParagraphCreateWithoutContributedInput>, Enumerable<ParagraphUncheckedCreateWithoutContributedInput>>
    connectOrCreate?: Enumerable<ParagraphCreateOrConnectWithoutContributedInput>
    upsert?: Enumerable<ParagraphUpsertWithWhereUniqueWithoutContributedInput>
    createMany?: ParagraphCreateManyContributedInputEnvelope
    set?: Enumerable<ParagraphWhereUniqueInput>
    disconnect?: Enumerable<ParagraphWhereUniqueInput>
    delete?: Enumerable<ParagraphWhereUniqueInput>
    connect?: Enumerable<ParagraphWhereUniqueInput>
    update?: Enumerable<ParagraphUpdateWithWhereUniqueWithoutContributedInput>
    updateMany?: Enumerable<ParagraphUpdateManyWithWhereWithoutContributedInput>
    deleteMany?: Enumerable<ParagraphScalarWhereInput>
  }

  export type ParticipantUncheckedUpdateManyWithoutStoryInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutStoryInput>, Enumerable<ParticipantUncheckedCreateWithoutStoryInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutStoryInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutStoryInput>
    createMany?: ParticipantCreateManyStoryInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutStoryInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutStoryInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type Quick_matchUncheckedUpdateOneWithoutQuick_matchInput = {
    create?: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: Quick_matchCreateOrConnectWithoutQuick_matchInput
    upsert?: Quick_matchUpsertWithoutQuick_matchInput
    disconnect?: boolean
    delete?: boolean
    connect?: Quick_matchWhereUniqueInput
    update?: XOR<Quick_matchUpdateWithoutQuick_matchInput, Quick_matchUncheckedUpdateWithoutQuick_matchInput>
  }

  export type Tale_modeUncheckedUpdateOneWithoutTaleInput = {
    create?: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
    connectOrCreate?: Tale_modeCreateOrConnectWithoutTaleInput
    upsert?: Tale_modeUpsertWithoutTaleInput
    disconnect?: boolean
    delete?: boolean
    connect?: Tale_modeWhereUniqueInput
    update?: XOR<Tale_modeUpdateWithoutTaleInput, Tale_modeUncheckedUpdateWithoutTaleInput>
  }

  export type StoryCreateNestedOneWithoutStoryInput = {
    create?: XOR<StoryCreateWithoutStoryInput, StoryUncheckedCreateWithoutStoryInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryInput
    connect?: StoryWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutParticipantInput = {
    create?: XOR<PlayerCreateWithoutParticipantInput, PlayerUncheckedCreateWithoutParticipantInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutParticipantInput
    connect?: PlayerWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StoryUpdateOneRequiredWithoutStoryInput = {
    create?: XOR<StoryCreateWithoutStoryInput, StoryUncheckedCreateWithoutStoryInput>
    connectOrCreate?: StoryCreateOrConnectWithoutStoryInput
    upsert?: StoryUpsertWithoutStoryInput
    connect?: StoryWhereUniqueInput
    update?: XOR<StoryUpdateWithoutStoryInput, StoryUncheckedUpdateWithoutStoryInput>
  }

  export type PlayerUpdateOneRequiredWithoutParticipantInput = {
    create?: XOR<PlayerCreateWithoutParticipantInput, PlayerUncheckedCreateWithoutParticipantInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutParticipantInput
    upsert?: PlayerUpsertWithoutParticipantInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutParticipantInput, PlayerUncheckedUpdateWithoutParticipantInput>
  }

  export type StoryCreateNestedOneWithoutTaleInput = {
    create?: XOR<StoryCreateWithoutTaleInput, StoryUncheckedCreateWithoutTaleInput>
    connectOrCreate?: StoryCreateOrConnectWithoutTaleInput
    connect?: StoryWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutTaleInput = {
    create?: XOR<StoryCreateWithoutTaleInput, StoryUncheckedCreateWithoutTaleInput>
    connectOrCreate?: StoryCreateOrConnectWithoutTaleInput
    upsert?: StoryUpsertWithoutTaleInput
    connect?: StoryWhereUniqueInput
    update?: XOR<StoryUpdateWithoutTaleInput, StoryUncheckedUpdateWithoutTaleInput>
  }

  export type StoryCreateNestedOneWithoutQuick_matchInput = {
    create?: XOR<StoryCreateWithoutQuick_matchInput, StoryUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: StoryCreateOrConnectWithoutQuick_matchInput
    connect?: StoryWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutQuick_matchInput = {
    create?: XOR<StoryCreateWithoutQuick_matchInput, StoryUncheckedCreateWithoutQuick_matchInput>
    connectOrCreate?: StoryCreateOrConnectWithoutQuick_matchInput
    upsert?: StoryUpsertWithoutQuick_matchInput
    connect?: StoryWhereUniqueInput
    update?: XOR<StoryUpdateWithoutQuick_matchInput, StoryUncheckedUpdateWithoutQuick_matchInput>
  }

  export type StoryCreateNestedOneWithoutContributedInput = {
    create?: XOR<StoryCreateWithoutContributedInput, StoryUncheckedCreateWithoutContributedInput>
    connectOrCreate?: StoryCreateOrConnectWithoutContributedInput
    connect?: StoryWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutContributorInput = {
    create?: XOR<PlayerCreateWithoutContributorInput, PlayerUncheckedCreateWithoutContributorInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutContributorInput
    connect?: PlayerWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutContributedInput = {
    create?: XOR<StoryCreateWithoutContributedInput, StoryUncheckedCreateWithoutContributedInput>
    connectOrCreate?: StoryCreateOrConnectWithoutContributedInput
    upsert?: StoryUpsertWithoutContributedInput
    connect?: StoryWhereUniqueInput
    update?: XOR<StoryUpdateWithoutContributedInput, StoryUncheckedUpdateWithoutContributedInput>
  }

  export type PlayerUpdateOneRequiredWithoutContributorInput = {
    create?: XOR<PlayerCreateWithoutContributorInput, PlayerUncheckedCreateWithoutContributorInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutContributorInput
    upsert?: PlayerUpsertWithoutContributorInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutContributorInput, PlayerUncheckedUpdateWithoutContributorInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FriendshipCreateWithoutFriendInput = {
    himself: PlayerCreateNestedOneWithoutHimselfInput
  }

  export type FriendshipUncheckedCreateWithoutFriendInput = {
    username: string
  }

  export type FriendshipCreateOrConnectWithoutFriendInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutFriendInput, FriendshipUncheckedCreateWithoutFriendInput>
  }

  export type FriendshipCreateManyFriendInputEnvelope = {
    data: Enumerable<FriendshipCreateManyFriendInput>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutHimselfInput = {
    friend: PlayerCreateNestedOneWithoutFriendInput
  }

  export type FriendshipUncheckedCreateWithoutHimselfInput = {
    friendname: string
  }

  export type FriendshipCreateOrConnectWithoutHimselfInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutHimselfInput, FriendshipUncheckedCreateWithoutHimselfInput>
  }

  export type FriendshipCreateManyHimselfInputEnvelope = {
    data: Enumerable<FriendshipCreateManyHimselfInput>
    skipDuplicates?: boolean
  }

  export type ParagraphCreateWithoutContributorInput = {
    text: string
    Score?: number
    turn_number?: number
    contributed: StoryCreateNestedOneWithoutContributedInput
  }

  export type ParagraphUncheckedCreateWithoutContributorInput = {
    text: string
    Score?: number
    turn_number?: number
    story_id: number
  }

  export type ParagraphCreateOrConnectWithoutContributorInput = {
    where: ParagraphWhereUniqueInput
    create: XOR<ParagraphCreateWithoutContributorInput, ParagraphUncheckedCreateWithoutContributorInput>
  }

  export type ParagraphCreateManyContributorInputEnvelope = {
    data: Enumerable<ParagraphCreateManyContributorInput>
    skipDuplicates?: boolean
  }

  export type ParticipantCreateWithoutParticipantInput = {
    voted: string
    creator: boolean
    story: StoryCreateNestedOneWithoutStoryInput
  }

  export type ParticipantUncheckedCreateWithoutParticipantInput = {
    story_id: number
    voted: string
    creator: boolean
  }

  export type ParticipantCreateOrConnectWithoutParticipantInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutParticipantInput, ParticipantUncheckedCreateWithoutParticipantInput>
  }

  export type ParticipantCreateManyParticipantInputEnvelope = {
    data: Enumerable<ParticipantCreateManyParticipantInput>
    skipDuplicates?: boolean
  }

  export type PetitionCreateWithoutReceiverInput = {
    questioner: PlayerCreateNestedOneWithoutQuestionerInput
  }

  export type PetitionUncheckedCreateWithoutReceiverInput = {
    username: string
  }

  export type PetitionCreateOrConnectWithoutReceiverInput = {
    where: PetitionWhereUniqueInput
    create: XOR<PetitionCreateWithoutReceiverInput, PetitionUncheckedCreateWithoutReceiverInput>
  }

  export type PetitionCreateManyReceiverInputEnvelope = {
    data: Enumerable<PetitionCreateManyReceiverInput>
    skipDuplicates?: boolean
  }

  export type PetitionCreateWithoutQuestionerInput = {
    receiver: PlayerCreateNestedOneWithoutReceiverInput
  }

  export type PetitionUncheckedCreateWithoutQuestionerInput = {
    petition_name: string
  }

  export type PetitionCreateOrConnectWithoutQuestionerInput = {
    where: PetitionWhereUniqueInput
    create: XOR<PetitionCreateWithoutQuestionerInput, PetitionUncheckedCreateWithoutQuestionerInput>
  }

  export type PetitionCreateManyQuestionerInputEnvelope = {
    data: Enumerable<PetitionCreateManyQuestionerInput>
    skipDuplicates?: boolean
  }

  export type FriendshipUpsertWithWhereUniqueWithoutFriendInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutFriendInput, FriendshipUncheckedUpdateWithoutFriendInput>
    create: XOR<FriendshipCreateWithoutFriendInput, FriendshipUncheckedCreateWithoutFriendInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutFriendInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutFriendInput, FriendshipUncheckedUpdateWithoutFriendInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutFriendInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutFriendInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: Enumerable<FriendshipScalarWhereInput>
    OR?: Enumerable<FriendshipScalarWhereInput>
    NOT?: Enumerable<FriendshipScalarWhereInput>
    username?: StringFilter | string
    friendname?: StringFilter | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutHimselfInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutHimselfInput, FriendshipUncheckedUpdateWithoutHimselfInput>
    create: XOR<FriendshipCreateWithoutHimselfInput, FriendshipUncheckedCreateWithoutHimselfInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutHimselfInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutHimselfInput, FriendshipUncheckedUpdateWithoutHimselfInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutHimselfInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutHimselfInput>
  }

  export type ParagraphUpsertWithWhereUniqueWithoutContributorInput = {
    where: ParagraphWhereUniqueInput
    update: XOR<ParagraphUpdateWithoutContributorInput, ParagraphUncheckedUpdateWithoutContributorInput>
    create: XOR<ParagraphCreateWithoutContributorInput, ParagraphUncheckedCreateWithoutContributorInput>
  }

  export type ParagraphUpdateWithWhereUniqueWithoutContributorInput = {
    where: ParagraphWhereUniqueInput
    data: XOR<ParagraphUpdateWithoutContributorInput, ParagraphUncheckedUpdateWithoutContributorInput>
  }

  export type ParagraphUpdateManyWithWhereWithoutContributorInput = {
    where: ParagraphScalarWhereInput
    data: XOR<ParagraphUpdateManyMutationInput, ParagraphUncheckedUpdateManyWithoutContributorInput>
  }

  export type ParagraphScalarWhereInput = {
    AND?: Enumerable<ParagraphScalarWhereInput>
    OR?: Enumerable<ParagraphScalarWhereInput>
    NOT?: Enumerable<ParagraphScalarWhereInput>
    text?: StringFilter | string
    Score?: IntFilter | number
    turn_number?: IntFilter | number
    username?: StringFilter | string
    story_id?: IntFilter | number
  }

  export type ParticipantUpsertWithWhereUniqueWithoutParticipantInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutParticipantInput, ParticipantUncheckedUpdateWithoutParticipantInput>
    create: XOR<ParticipantCreateWithoutParticipantInput, ParticipantUncheckedCreateWithoutParticipantInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutParticipantInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutParticipantInput, ParticipantUncheckedUpdateWithoutParticipantInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutParticipantInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutParticipantInput>
  }

  export type ParticipantScalarWhereInput = {
    AND?: Enumerable<ParticipantScalarWhereInput>
    OR?: Enumerable<ParticipantScalarWhereInput>
    NOT?: Enumerable<ParticipantScalarWhereInput>
    username?: StringFilter | string
    story_id?: IntFilter | number
    voted?: StringFilter | string
    creator?: BoolFilter | boolean
  }

  export type PetitionUpsertWithWhereUniqueWithoutReceiverInput = {
    where: PetitionWhereUniqueInput
    update: XOR<PetitionUpdateWithoutReceiverInput, PetitionUncheckedUpdateWithoutReceiverInput>
    create: XOR<PetitionCreateWithoutReceiverInput, PetitionUncheckedCreateWithoutReceiverInput>
  }

  export type PetitionUpdateWithWhereUniqueWithoutReceiverInput = {
    where: PetitionWhereUniqueInput
    data: XOR<PetitionUpdateWithoutReceiverInput, PetitionUncheckedUpdateWithoutReceiverInput>
  }

  export type PetitionUpdateManyWithWhereWithoutReceiverInput = {
    where: PetitionScalarWhereInput
    data: XOR<PetitionUpdateManyMutationInput, PetitionUncheckedUpdateManyWithoutReceiverInput>
  }

  export type PetitionScalarWhereInput = {
    AND?: Enumerable<PetitionScalarWhereInput>
    OR?: Enumerable<PetitionScalarWhereInput>
    NOT?: Enumerable<PetitionScalarWhereInput>
    username?: StringFilter | string
    petition_name?: StringFilter | string
  }

  export type PetitionUpsertWithWhereUniqueWithoutQuestionerInput = {
    where: PetitionWhereUniqueInput
    update: XOR<PetitionUpdateWithoutQuestionerInput, PetitionUncheckedUpdateWithoutQuestionerInput>
    create: XOR<PetitionCreateWithoutQuestionerInput, PetitionUncheckedCreateWithoutQuestionerInput>
  }

  export type PetitionUpdateWithWhereUniqueWithoutQuestionerInput = {
    where: PetitionWhereUniqueInput
    data: XOR<PetitionUpdateWithoutQuestionerInput, PetitionUncheckedUpdateWithoutQuestionerInput>
  }

  export type PetitionUpdateManyWithWhereWithoutQuestionerInput = {
    where: PetitionScalarWhereInput
    data: XOR<PetitionUpdateManyMutationInput, PetitionUncheckedUpdateManyWithoutQuestionerInput>
  }

  export type PlayerCreateWithoutReceiverInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateWithoutReceiverInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerCreateOrConnectWithoutReceiverInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutReceiverInput, PlayerUncheckedCreateWithoutReceiverInput>
  }

  export type PlayerCreateWithoutQuestionerInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
  }

  export type PlayerUncheckedCreateWithoutQuestionerInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
  }

  export type PlayerCreateOrConnectWithoutQuestionerInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutQuestionerInput, PlayerUncheckedCreateWithoutQuestionerInput>
  }

  export type PlayerUpsertWithoutReceiverInput = {
    update: XOR<PlayerUpdateWithoutReceiverInput, PlayerUncheckedUpdateWithoutReceiverInput>
    create: XOR<PlayerCreateWithoutReceiverInput, PlayerUncheckedCreateWithoutReceiverInput>
  }

  export type PlayerUpdateWithoutReceiverInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    himself?: FriendshipUpdateManyWithoutHimselfInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateWithoutReceiverInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type PlayerUpsertWithoutQuestionerInput = {
    update: XOR<PlayerUpdateWithoutQuestionerInput, PlayerUncheckedUpdateWithoutQuestionerInput>
    create: XOR<PlayerCreateWithoutQuestionerInput, PlayerUncheckedCreateWithoutQuestionerInput>
  }

  export type PlayerUpdateWithoutQuestionerInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    himself?: FriendshipUpdateManyWithoutHimselfInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
  }

  export type PlayerUncheckedUpdateWithoutQuestionerInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
  }

  export type PlayerCreateWithoutFriendInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateWithoutFriendInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerCreateOrConnectWithoutFriendInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutFriendInput, PlayerUncheckedCreateWithoutFriendInput>
  }

  export type PlayerCreateWithoutHimselfInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateWithoutHimselfInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerCreateOrConnectWithoutHimselfInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutHimselfInput, PlayerUncheckedCreateWithoutHimselfInput>
  }

  export type PlayerUpsertWithoutFriendInput = {
    update: XOR<PlayerUpdateWithoutFriendInput, PlayerUncheckedUpdateWithoutFriendInput>
    create: XOR<PlayerCreateWithoutFriendInput, PlayerUncheckedCreateWithoutFriendInput>
  }

  export type PlayerUpdateWithoutFriendInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    himself?: FriendshipUpdateManyWithoutHimselfInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateWithoutFriendInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type PlayerUpsertWithoutHimselfInput = {
    update: XOR<PlayerUpdateWithoutHimselfInput, PlayerUncheckedUpdateWithoutHimselfInput>
    create: XOR<PlayerCreateWithoutHimselfInput, PlayerUncheckedCreateWithoutHimselfInput>
  }

  export type PlayerUpdateWithoutHimselfInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateWithoutHimselfInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type ParagraphCreateWithoutContributedInput = {
    text: string
    Score?: number
    turn_number?: number
    contributor: PlayerCreateNestedOneWithoutContributorInput
  }

  export type ParagraphUncheckedCreateWithoutContributedInput = {
    text: string
    Score?: number
    turn_number?: number
    username: string
  }

  export type ParagraphCreateOrConnectWithoutContributedInput = {
    where: ParagraphWhereUniqueInput
    create: XOR<ParagraphCreateWithoutContributedInput, ParagraphUncheckedCreateWithoutContributedInput>
  }

  export type ParagraphCreateManyContributedInputEnvelope = {
    data: Enumerable<ParagraphCreateManyContributedInput>
    skipDuplicates?: boolean
  }

  export type ParticipantCreateWithoutStoryInput = {
    voted: string
    creator: boolean
    participant: PlayerCreateNestedOneWithoutParticipantInput
  }

  export type ParticipantUncheckedCreateWithoutStoryInput = {
    username: string
    voted: string
    creator: boolean
  }

  export type ParticipantCreateOrConnectWithoutStoryInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutStoryInput, ParticipantUncheckedCreateWithoutStoryInput>
  }

  export type ParticipantCreateManyStoryInputEnvelope = {
    data: Enumerable<ParticipantCreateManyStoryInput>
    skipDuplicates?: boolean
  }

  export type Quick_matchCreateWithoutQuick_matchInput = {
    mode: number
  }

  export type Quick_matchUncheckedCreateWithoutQuick_matchInput = {
    mode: number
  }

  export type Quick_matchCreateOrConnectWithoutQuick_matchInput = {
    where: Quick_matchWhereUniqueInput
    create: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
  }

  export type Tale_modeCreateWithoutTaleInput = {
    max_turns?: number
    max_paragraph_chars?: number
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title: string
    turn?: number
  }

  export type Tale_modeUncheckedCreateWithoutTaleInput = {
    max_turns?: number
    max_paragraph_chars?: number
    privacy?: boolean
    finished?: boolean
    scored?: boolean
    title: string
    turn?: number
  }

  export type Tale_modeCreateOrConnectWithoutTaleInput = {
    where: Tale_modeWhereUniqueInput
    create: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
  }

  export type ParagraphUpsertWithWhereUniqueWithoutContributedInput = {
    where: ParagraphWhereUniqueInput
    update: XOR<ParagraphUpdateWithoutContributedInput, ParagraphUncheckedUpdateWithoutContributedInput>
    create: XOR<ParagraphCreateWithoutContributedInput, ParagraphUncheckedCreateWithoutContributedInput>
  }

  export type ParagraphUpdateWithWhereUniqueWithoutContributedInput = {
    where: ParagraphWhereUniqueInput
    data: XOR<ParagraphUpdateWithoutContributedInput, ParagraphUncheckedUpdateWithoutContributedInput>
  }

  export type ParagraphUpdateManyWithWhereWithoutContributedInput = {
    where: ParagraphScalarWhereInput
    data: XOR<ParagraphUpdateManyMutationInput, ParagraphUncheckedUpdateManyWithoutContributedInput>
  }

  export type ParticipantUpsertWithWhereUniqueWithoutStoryInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutStoryInput, ParticipantUncheckedUpdateWithoutStoryInput>
    create: XOR<ParticipantCreateWithoutStoryInput, ParticipantUncheckedCreateWithoutStoryInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutStoryInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutStoryInput, ParticipantUncheckedUpdateWithoutStoryInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutStoryInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutStoryInput>
  }

  export type Quick_matchUpsertWithoutQuick_matchInput = {
    update: XOR<Quick_matchUpdateWithoutQuick_matchInput, Quick_matchUncheckedUpdateWithoutQuick_matchInput>
    create: XOR<Quick_matchCreateWithoutQuick_matchInput, Quick_matchUncheckedCreateWithoutQuick_matchInput>
  }

  export type Quick_matchUpdateWithoutQuick_matchInput = {
    mode?: IntFieldUpdateOperationsInput | number
  }

  export type Quick_matchUncheckedUpdateWithoutQuick_matchInput = {
    mode?: IntFieldUpdateOperationsInput | number
  }

  export type Tale_modeUpsertWithoutTaleInput = {
    update: XOR<Tale_modeUpdateWithoutTaleInput, Tale_modeUncheckedUpdateWithoutTaleInput>
    create: XOR<Tale_modeCreateWithoutTaleInput, Tale_modeUncheckedCreateWithoutTaleInput>
  }

  export type Tale_modeUpdateWithoutTaleInput = {
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
  }

  export type Tale_modeUncheckedUpdateWithoutTaleInput = {
    max_turns?: IntFieldUpdateOperationsInput | number
    max_paragraph_chars?: IntFieldUpdateOperationsInput | number
    privacy?: BoolFieldUpdateOperationsInput | boolean
    finished?: BoolFieldUpdateOperationsInput | boolean
    scored?: BoolFieldUpdateOperationsInput | boolean
    title?: StringFieldUpdateOperationsInput | string
    turn?: IntFieldUpdateOperationsInput | number
  }

  export type StoryCreateWithoutStoryInput = {
    date?: Date | string
    contributed?: ParagraphCreateNestedManyWithoutContributedInput
    quick_match?: Quick_matchCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeCreateNestedOneWithoutTaleInput
  }

  export type StoryUncheckedCreateWithoutStoryInput = {
    story_id?: number
    date?: Date | string
    contributed?: ParagraphUncheckedCreateNestedManyWithoutContributedInput
    quick_match?: Quick_matchUncheckedCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedCreateNestedOneWithoutTaleInput
  }

  export type StoryCreateOrConnectWithoutStoryInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutStoryInput, StoryUncheckedCreateWithoutStoryInput>
  }

  export type PlayerCreateWithoutParticipantInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphCreateNestedManyWithoutContributorInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateWithoutParticipantInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    contributor?: ParagraphUncheckedCreateNestedManyWithoutContributorInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerCreateOrConnectWithoutParticipantInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutParticipantInput, PlayerUncheckedCreateWithoutParticipantInput>
  }

  export type StoryUpsertWithoutStoryInput = {
    update: XOR<StoryUpdateWithoutStoryInput, StoryUncheckedUpdateWithoutStoryInput>
    create: XOR<StoryCreateWithoutStoryInput, StoryUncheckedCreateWithoutStoryInput>
  }

  export type StoryUpdateWithoutStoryInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUpdateManyWithoutContributedInput
    quick_match?: Quick_matchUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUpdateOneWithoutTaleInput
  }

  export type StoryUncheckedUpdateWithoutStoryInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUncheckedUpdateManyWithoutContributedInput
    quick_match?: Quick_matchUncheckedUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedUpdateOneWithoutTaleInput
  }

  export type PlayerUpsertWithoutParticipantInput = {
    update: XOR<PlayerUpdateWithoutParticipantInput, PlayerUncheckedUpdateWithoutParticipantInput>
    create: XOR<PlayerCreateWithoutParticipantInput, PlayerUncheckedCreateWithoutParticipantInput>
  }

  export type PlayerUpdateWithoutParticipantInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    himself?: FriendshipUpdateManyWithoutHimselfInput
    contributor?: ParagraphUpdateManyWithoutContributorInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateWithoutParticipantInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    contributor?: ParagraphUncheckedUpdateManyWithoutContributorInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type StoryCreateWithoutTaleInput = {
    date?: Date | string
    contributed?: ParagraphCreateNestedManyWithoutContributedInput
    story?: ParticipantCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchCreateNestedOneWithoutQuick_matchInput
  }

  export type StoryUncheckedCreateWithoutTaleInput = {
    story_id?: number
    date?: Date | string
    contributed?: ParagraphUncheckedCreateNestedManyWithoutContributedInput
    story?: ParticipantUncheckedCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedCreateNestedOneWithoutQuick_matchInput
  }

  export type StoryCreateOrConnectWithoutTaleInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutTaleInput, StoryUncheckedCreateWithoutTaleInput>
  }

  export type StoryUpsertWithoutTaleInput = {
    update: XOR<StoryUpdateWithoutTaleInput, StoryUncheckedUpdateWithoutTaleInput>
    create: XOR<StoryCreateWithoutTaleInput, StoryUncheckedCreateWithoutTaleInput>
  }

  export type StoryUpdateWithoutTaleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUpdateManyWithoutContributedInput
    story?: ParticipantUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUpdateOneWithoutQuick_matchInput
  }

  export type StoryUncheckedUpdateWithoutTaleInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUncheckedUpdateManyWithoutContributedInput
    story?: ParticipantUncheckedUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedUpdateOneWithoutQuick_matchInput
  }

  export type StoryCreateWithoutQuick_matchInput = {
    date?: Date | string
    contributed?: ParagraphCreateNestedManyWithoutContributedInput
    story?: ParticipantCreateNestedManyWithoutStoryInput
    tale?: Tale_modeCreateNestedOneWithoutTaleInput
  }

  export type StoryUncheckedCreateWithoutQuick_matchInput = {
    story_id?: number
    date?: Date | string
    contributed?: ParagraphUncheckedCreateNestedManyWithoutContributedInput
    story?: ParticipantUncheckedCreateNestedManyWithoutStoryInput
    tale?: Tale_modeUncheckedCreateNestedOneWithoutTaleInput
  }

  export type StoryCreateOrConnectWithoutQuick_matchInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutQuick_matchInput, StoryUncheckedCreateWithoutQuick_matchInput>
  }

  export type StoryUpsertWithoutQuick_matchInput = {
    update: XOR<StoryUpdateWithoutQuick_matchInput, StoryUncheckedUpdateWithoutQuick_matchInput>
    create: XOR<StoryCreateWithoutQuick_matchInput, StoryUncheckedCreateWithoutQuick_matchInput>
  }

  export type StoryUpdateWithoutQuick_matchInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUpdateManyWithoutContributedInput
    story?: ParticipantUpdateManyWithoutStoryInput
    tale?: Tale_modeUpdateOneWithoutTaleInput
  }

  export type StoryUncheckedUpdateWithoutQuick_matchInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    contributed?: ParagraphUncheckedUpdateManyWithoutContributedInput
    story?: ParticipantUncheckedUpdateManyWithoutStoryInput
    tale?: Tale_modeUncheckedUpdateOneWithoutTaleInput
  }

  export type StoryCreateWithoutContributedInput = {
    date?: Date | string
    story?: ParticipantCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeCreateNestedOneWithoutTaleInput
  }

  export type StoryUncheckedCreateWithoutContributedInput = {
    story_id?: number
    date?: Date | string
    story?: ParticipantUncheckedCreateNestedManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedCreateNestedOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedCreateNestedOneWithoutTaleInput
  }

  export type StoryCreateOrConnectWithoutContributedInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutContributedInput, StoryUncheckedCreateWithoutContributedInput>
  }

  export type PlayerCreateWithoutContributorInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipCreateNestedManyWithoutFriendInput
    himself?: FriendshipCreateNestedManyWithoutHimselfInput
    participant?: ParticipantCreateNestedManyWithoutParticipantInput
    receiver?: PetitionCreateNestedManyWithoutReceiverInput
    questioner?: PetitionCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerUncheckedCreateWithoutContributorInput = {
    username: string
    password_hash: string
    email: string
    image_ID?: number
    mooncoins?: number
    stars?: number
    friend?: FriendshipUncheckedCreateNestedManyWithoutFriendInput
    himself?: FriendshipUncheckedCreateNestedManyWithoutHimselfInput
    participant?: ParticipantUncheckedCreateNestedManyWithoutParticipantInput
    receiver?: PetitionUncheckedCreateNestedManyWithoutReceiverInput
    questioner?: PetitionUncheckedCreateNestedManyWithoutQuestionerInput
  }

  export type PlayerCreateOrConnectWithoutContributorInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutContributorInput, PlayerUncheckedCreateWithoutContributorInput>
  }

  export type StoryUpsertWithoutContributedInput = {
    update: XOR<StoryUpdateWithoutContributedInput, StoryUncheckedUpdateWithoutContributedInput>
    create: XOR<StoryCreateWithoutContributedInput, StoryUncheckedCreateWithoutContributedInput>
  }

  export type StoryUpdateWithoutContributedInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: ParticipantUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUpdateOneWithoutTaleInput
  }

  export type StoryUncheckedUpdateWithoutContributedInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    story?: ParticipantUncheckedUpdateManyWithoutStoryInput
    quick_match?: Quick_matchUncheckedUpdateOneWithoutQuick_matchInput
    tale?: Tale_modeUncheckedUpdateOneWithoutTaleInput
  }

  export type PlayerUpsertWithoutContributorInput = {
    update: XOR<PlayerUpdateWithoutContributorInput, PlayerUncheckedUpdateWithoutContributorInput>
    create: XOR<PlayerCreateWithoutContributorInput, PlayerUncheckedCreateWithoutContributorInput>
  }

  export type PlayerUpdateWithoutContributorInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUpdateManyWithoutFriendInput
    himself?: FriendshipUpdateManyWithoutHimselfInput
    participant?: ParticipantUpdateManyWithoutParticipantInput
    receiver?: PetitionUpdateManyWithoutReceiverInput
    questioner?: PetitionUpdateManyWithoutQuestionerInput
  }

  export type PlayerUncheckedUpdateWithoutContributorInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    image_ID?: IntFieldUpdateOperationsInput | number
    mooncoins?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    friend?: FriendshipUncheckedUpdateManyWithoutFriendInput
    himself?: FriendshipUncheckedUpdateManyWithoutHimselfInput
    participant?: ParticipantUncheckedUpdateManyWithoutParticipantInput
    receiver?: PetitionUncheckedUpdateManyWithoutReceiverInput
    questioner?: PetitionUncheckedUpdateManyWithoutQuestionerInput
  }

  export type FriendshipCreateManyFriendInput = {
    username: string
  }

  export type FriendshipCreateManyHimselfInput = {
    friendname: string
  }

  export type ParagraphCreateManyContributorInput = {
    text: string
    Score?: number
    turn_number?: number
    story_id: number
  }

  export type ParticipantCreateManyParticipantInput = {
    story_id: number
    voted: string
    creator: boolean
  }

  export type PetitionCreateManyReceiverInput = {
    username: string
  }

  export type PetitionCreateManyQuestionerInput = {
    petition_name: string
  }

  export type FriendshipUpdateWithoutFriendInput = {
    himself?: PlayerUpdateOneRequiredWithoutHimselfInput
  }

  export type FriendshipUncheckedUpdateWithoutFriendInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type FriendshipUpdateWithoutHimselfInput = {
    friend?: PlayerUpdateOneRequiredWithoutFriendInput
  }

  export type FriendshipUncheckedUpdateWithoutHimselfInput = {
    friendname?: StringFieldUpdateOperationsInput | string
  }

  export type ParagraphUpdateWithoutContributorInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    contributed?: StoryUpdateOneRequiredWithoutContributedInput
  }

  export type ParagraphUncheckedUpdateWithoutContributorInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    story_id?: IntFieldUpdateOperationsInput | number
  }

  export type ParticipantUpdateWithoutParticipantInput = {
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
    story?: StoryUpdateOneRequiredWithoutStoryInput
  }

  export type ParticipantUncheckedUpdateWithoutParticipantInput = {
    story_id?: IntFieldUpdateOperationsInput | number
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetitionUpdateWithoutReceiverInput = {
    questioner?: PlayerUpdateOneRequiredWithoutQuestionerInput
  }

  export type PetitionUncheckedUpdateWithoutReceiverInput = {
    username?: StringFieldUpdateOperationsInput | string
  }

  export type PetitionUpdateWithoutQuestionerInput = {
    receiver?: PlayerUpdateOneRequiredWithoutReceiverInput
  }

  export type PetitionUncheckedUpdateWithoutQuestionerInput = {
    petition_name?: StringFieldUpdateOperationsInput | string
  }

  export type ParagraphCreateManyContributedInput = {
    text: string
    Score?: number
    turn_number?: number
    username: string
  }

  export type ParticipantCreateManyStoryInput = {
    username: string
    voted: string
    creator: boolean
  }

  export type ParagraphUpdateWithoutContributedInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    contributor?: PlayerUpdateOneRequiredWithoutContributorInput
  }

  export type ParagraphUncheckedUpdateWithoutContributedInput = {
    text?: StringFieldUpdateOperationsInput | string
    Score?: IntFieldUpdateOperationsInput | number
    turn_number?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
  }

  export type ParticipantUpdateWithoutStoryInput = {
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
    participant?: PlayerUpdateOneRequiredWithoutParticipantInput
  }

  export type ParticipantUncheckedUpdateWithoutStoryInput = {
    username?: StringFieldUpdateOperationsInput | string
    voted?: StringFieldUpdateOperationsInput | string
    creator?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}